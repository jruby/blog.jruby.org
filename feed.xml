<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>The JRuby Blog</title>
  <link href="http://blog.jruby.org/atom.xml" rel="self"/>
  <link href="http://blog.jruby.org/"/>
  <updated>2022-06-24T13:53:10-04:00</updated>
  <id>http://blog.jruby.org/</id>
  <author>
    <name>Charles Nutter, Nick Sieger, Thomas Enebo, Shane Becker</name>
    <email>cnutter@engineyard.com, nick@nicksieger.com, tenebo@engineyard.com, veganstraightedge@gmail.com</email>
  </author>

  
    <entry>
      <title>Generating Java Classes at Runtime with JRuby 9.3.4</title>
      <link href="http://blog.jruby.org/2022/06/jruby-class-extension-9.3"/>
      <updated>2022-06-24T00:00:00-04:00</updated>
      <id>http://blog.jruby.org/2022/06/jruby-class-extension-9.3</id>
      <author>
        <name>Patrick Plenefisch</name>
        <email></email>
      </author>
      <content type="html">&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#background&quot;&gt;1. Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#constructors&quot;&gt;2. Constructors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#fields&quot;&gt;3. Fields&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#annotations&quot;&gt;4. Annotations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jrubyfx-2-0&quot;&gt;5. JRubyFX 2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#gotchas-classloading-ruby-classes&quot;&gt;6. Gotchas: Classloading Ruby Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;7. Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;background&quot;&gt;1. Background&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are many reasons people use the JRuby implementation of Ruby over MRI/CRuby: increased long-run performance, lock-free multi-threading, the ability to deliver code as a war file, and to integrate with Java libraries. I often find my use of JRuby via integrating with Java, and that&amp;#8217;s the topic of this post.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, what types of basic Java integration does JRuby currently provide?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Embedding JRuby in Java code (JSR-223)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Memory/GC integration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Marshaling values from Ruby to Java&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ruby code calling into Java&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Marshaling values from Java to Ruby&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implementing interfaces so Java can call Ruby&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extending a Java class with a Ruby class (concrete extension)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lowering a Ruby class into a JVM class at runtime (reification, &lt;code&gt;become_java!&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;jrubyc&lt;/code&gt; class compiler that can generate (ahead of time) Java classes&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post will principally investigate #7 and #8, and some of their recent changes in the JRuby 9.3.4 series. I shall assume a basic knowledge of how the JVM works, and a familiarity with Ruby.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, why would one want to do either #7 or #8? Number 7, henceforth referred to as concrete extension, should hopefully be more obvious, as lots of frameworks and libraries require extending a class, and doing so from Ruby code is simply more convenient when using JRuby than having to bundle an extra jar. Number 8, henceforth referred to as reification, is needed whenever a full JVM class is required, either for multi-interface support, or as a token.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a quick example, lets look at using Logback, a common Java logging framework. Logback (slf4j, really) requires a class as a token to get a logger. The Ruby version uses using concrete extension and reification together.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
All examples in here use the &lt;code&gt;maven-require&lt;/code&gt; gem to load maven dependencies interactively. Install it via &lt;code&gt;gem install maven-require&lt;/code&gt; and then in each &lt;code&gt;irb&lt;/code&gt; session or file, &lt;code&gt;require 'maven_require'&lt;/code&gt; at the top. Note the differing gem name and require line.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Classic Java Usage of Logback&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot; style=&quot;background: #f8f8f8;&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;org.slf4j.Logger&lt;/span&gt;;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;org.slf4j.LoggerFactory&lt;/span&gt;;

&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;JavaPiList&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;extends&lt;/span&gt; java.&lt;span style=&quot;color: #7D9029&quot;&gt;util&lt;/span&gt;.&lt;span style=&quot;color: #7D9029&quot;&gt;AbstractList&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&quot;color: #666666&quot;&gt;&amp;gt;&lt;/span&gt; {

    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;static&lt;/span&gt; Logger logger &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; LoggerFactory.&lt;span style=&quot;color: #7D9029&quot;&gt;getLogger&lt;/span&gt;(JavaPiList.&lt;span style=&quot;color: #7D9029&quot;&gt;class&lt;/span&gt;);
    &lt;span style=&quot;color: #B00040&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;[]&lt;/span&gt; pi &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; {&lt;span style=&quot;color: #666666&quot;&gt;3&lt;/span&gt;,&lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;,&lt;span style=&quot;color: #666666&quot;&gt;4&lt;/span&gt;,&lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;,&lt;span style=&quot;color: #666666&quot;&gt;5&lt;/span&gt;,&lt;span style=&quot;color: #666666&quot;&gt;9&lt;/span&gt;};

    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; Integer &lt;span style=&quot;color: #0000FF&quot;&gt;get&lt;/span&gt;(&lt;span style=&quot;color: #B00040&quot;&gt;int&lt;/span&gt; index) {
        logger.&lt;span style=&quot;color: #7D9029&quot;&gt;info&lt;/span&gt;(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Getting index {}&amp;quot;&lt;/span&gt;, index);
        &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;return&lt;/span&gt; pi&lt;span style=&quot;color: #666666&quot;&gt;[&lt;/span&gt;index&lt;span style=&quot;color: #666666&quot;&gt;]&lt;/span&gt;;
    }

    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;size&lt;/span&gt;() {
        &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;return&lt;/span&gt; pi.&lt;span style=&quot;color: #7D9029&quot;&gt;length&lt;/span&gt;;
    }

    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;main&lt;/span&gt;(String&lt;span style=&quot;color: #666666&quot;&gt;[]&lt;/span&gt; args) {
        &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; JavaPiList().&lt;span style=&quot;color: #7D9029&quot;&gt;get&lt;/span&gt;(&lt;span style=&quot;color: #666666&quot;&gt;3&lt;/span&gt;);
        &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// =&amp;gt; 12:34:56.789 [main] INFO JavaPiList - Getting index 3&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Ported JRuby Usage of Logback&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot; style=&quot;background: #f8f8f8;&quot;&gt;&lt;code data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;require&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;jruby/core_ext&amp;#39;&lt;/span&gt; &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# required for become_java! to do anything useful&lt;/span&gt;
&lt;span style=&quot;color: #008000&quot;&gt;require&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;maven_require&amp;#39;&lt;/span&gt;
&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# load latest version of logback into this Ruby session&lt;/span&gt;
maven_require &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;ch.qos.logback:logback-classic:RELEASE&amp;quot;&lt;/span&gt;

&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;RubyPiList&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;&amp;lt;&lt;/span&gt; java&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;util&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;AbstractList
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;initialize&lt;/span&gt;
        &lt;span style=&quot;color: #19177C&quot;&gt;@pi&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;[3&lt;/span&gt;,&lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;,&lt;span style=&quot;color: #666666&quot;&gt;4&lt;/span&gt;,&lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;,&lt;span style=&quot;color: #666666&quot;&gt;5&lt;/span&gt;,&lt;span style=&quot;color: #666666&quot;&gt;9]&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;get&lt;/span&gt;(index)
        &lt;span style=&quot;color: #880000&quot;&gt;Logger&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;info(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Getting index {}&amp;quot;&lt;/span&gt;, index)
        &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #19177C&quot;&gt;@pi&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;[&lt;/span&gt;index&lt;span style=&quot;color: #666666&quot;&gt;]&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;size&lt;/span&gt;()
        &lt;span style=&quot;color: #19177C&quot;&gt;@pi&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;length
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;
    &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# Ensure this class is reified&lt;/span&gt;
    become_java!
    &lt;span style=&quot;color: #880000&quot;&gt;Logger&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; org&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;slf4j&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;LoggerFactory&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;get_logger(&lt;span style=&quot;color: #880000&quot;&gt;RubyPiList&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;java_class)
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;
&lt;span style=&quot;color: #880000&quot;&gt;RubyPiList&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;new&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;get(&lt;span style=&quot;color: #666666&quot;&gt;3&lt;/span&gt;)
&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# =&amp;gt; 12:34:56.789 [main] INFO rubyobj.RubyPiList - Getting index 3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Neat! How is this implemented under the hood in JRuby? We can take a look at the generated classes to find out. But first, we must save the classes generated to a disk somewhere. Luckily, this is easy to do selectively by passing a directory to &lt;code&gt;become_java!&lt;/code&gt;, and the generated class will be saved under it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Saving class files&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot; style=&quot;background: #f8f8f8;&quot;&gt;&lt;code data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;become_java!(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;/tmp/jruby-dump-folder&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
For some of the examples here I&amp;#8217;ve taken the JVM bytecode generated, and run it through the &lt;a href=&quot;https://github.com/JetBrains/intellij-community/tree/master/plugins/java-decompiler/engine&quot;&gt;FernFlower&lt;/a&gt; decompiler. The code you see may not compile, and those seeking a deeper understanding are encouraged to explore the disassembled JVM bytecode directly. I recommend &lt;a href=&quot;https://bytecodeviewer.com/&quot;&gt;Bytecode Viewer&lt;/a&gt; as it&amp;#8217;s what I used to develop these improvements to JRuby.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, we can look at the decompiled MyRubyClass that JRuby generated for us:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Generated MyRubyClass (decompiled)&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot; style=&quot;background: #f8f8f8;&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;RubyPiList&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;extends&lt;/span&gt; AbstractList &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;implements&lt;/span&gt; ReifiedJavaProxy {
   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;private&lt;/span&gt; synthetic &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;final&lt;/span&gt; ConcreteJavaProxy &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;this&lt;/span&gt;$rubyObject;
   &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// ...bookkeeping fields snipped...&lt;/span&gt;
   &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// ...constructors snipped...&lt;/span&gt;

   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;size&lt;/span&gt;() {
      &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color: #7D9029&quot;&gt;this$rubyObject&lt;/span&gt;.&lt;span style=&quot;color: #7D9029&quot;&gt;ensureThis&lt;/span&gt;(&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;this&lt;/span&gt;);
      &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;return&lt;/span&gt; ((Number)&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color: #7D9029&quot;&gt;this$rubyObject&lt;/span&gt;.&lt;span style=&quot;color: #7D9029&quot;&gt;callMethod&lt;/span&gt;(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;size&amp;quot;&lt;/span&gt;, IRubyObject.&lt;span style=&quot;color: #7D9029&quot;&gt;NULL_ARRAY&lt;/span&gt;).&lt;span style=&quot;color: #7D9029&quot;&gt;toJava&lt;/span&gt;(Integer.&lt;span style=&quot;color: #7D9029&quot;&gt;TYPE&lt;/span&gt;)).&lt;span style=&quot;color: #7D9029&quot;&gt;intValue&lt;/span&gt;();
   }

   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; Object &lt;span style=&quot;color: #0000FF&quot;&gt;get&lt;/span&gt;(&lt;span style=&quot;color: #B00040&quot;&gt;int&lt;/span&gt; var1) {
      &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color: #7D9029&quot;&gt;this$rubyObject&lt;/span&gt;.&lt;span style=&quot;color: #7D9029&quot;&gt;ensureThis&lt;/span&gt;(&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;this&lt;/span&gt;);
      &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;return&lt;/span&gt; (Object)&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color: #7D9029&quot;&gt;this$rubyObject&lt;/span&gt;.&lt;span style=&quot;color: #7D9029&quot;&gt;callMethod&lt;/span&gt;(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;get&amp;quot;&lt;/span&gt;,
            &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; IRubyObject&lt;span style=&quot;color: #666666&quot;&gt;[]&lt;/span&gt;{
                JavaUtil.&lt;span style=&quot;color: #7D9029&quot;&gt;convertJavaToRuby&lt;/span&gt;(ruby, var1)
            }).&lt;span style=&quot;color: #7D9029&quot;&gt;toJava&lt;/span&gt;(Object.&lt;span style=&quot;color: #7D9029&quot;&gt;class&lt;/span&gt;);
   }
   &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// ...bookkeeping methods snipped...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here we can see several important facts. First, this is just a proxy for a Ruby class. As the Java class just delegate everything to the Ruby object, all the logic can still be swapped around via monkey patching and it is still dynamic under the hood. The Java class is merely an interface to the Ruby class. Second, there is lots of internal JRuby bookkeeping present, so performance may be lower. Third, all instance variables are not lowered to fields and are still Ruby-private. And fourth, the method signatures were picked up from the superclass.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For most JRuby Java integrations this is fine, but sometimes you need to add some more flair to your generated classes. Let us investigate three separate ways to upgrade our integration game with JRuby 9.3.4 improvements to concrete reification:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Java-callable constructors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fields&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Annotations&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;constructors&quot;&gt;2. Constructors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first issue I ever filed against JRuby was about the lack of java-callable constructors for java-extending classes (concrete extension), in 2012. One anagram and 8½ years later, it was finally closed in 2021, as my implementation was merged into JRuby 9.3.0. What caused me to file the issue, and still want it done in 2021? JavaFX, or more specifically, the JRuby bindings of JavaFX, JRubyFX. JavaFX is a cross-platform GUI toolkit, and my usual go-to for GUI work when I&amp;#8217;m writing Ruby.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the features that drew me to JavaFX is SceneBuilder, a drag-and-drop GUI designer that produces a runtime-loadable XML (cleverly called FXML) description of the GUI layout. While it&amp;#8217;s possible to use JavaFX/JRubyFX without FXML (and indeed most of the people using JRubyFX seem to not use it), FXML is very useful. Supporting FXML in JRubyFX was tricky, as the JavaFX &lt;code&gt;FXMLLoader&lt;/code&gt; reads the FXML to build classes and set fields. It does this by using reflection to call the no-arg constructor of the named class in the FXML. This is where I ran into trouble in 2012, but is now fixed, as of JRuby 9.3.1 (and utilized in JRubyFX 2.0). If you want to be able to call a constructor from Java for a Ruby class extending a Java class, now you can do so, and it&amp;#8217;s configurable:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Simple Construction Example&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot; style=&quot;background: #f8f8f8;&quot;&gt;&lt;code data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;require&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;jruby/core_ext&amp;#39;&lt;/span&gt; &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# required for become_java! to do anything useful&lt;/span&gt;

&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;ChaosParrot&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;&amp;lt;&lt;/span&gt; java&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;io&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;InputStream
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;initialize&lt;/span&gt;()
        &lt;span style=&quot;color: #008000&quot;&gt;puts&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;ChaosParrot was initialized&amp;quot;&lt;/span&gt;
        &lt;span style=&quot;color: #19177C&quot;&gt;@percent&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;0.1&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;

    java_signature &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;void setPercent(float)&amp;#39;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;setPercent&lt;/span&gt;(pct)
        &lt;span style=&quot;color: #008000&quot;&gt;puts&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Got percent: &lt;/span&gt;&lt;span style=&quot;color: #BB6688; font-weight: bold&quot;&gt;#{&lt;/span&gt;pct&lt;span style=&quot;color: #BB6688; font-weight: bold&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;&lt;/span&gt;
        &lt;span style=&quot;color: #19177C&quot;&gt;@percent&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; pct
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;

    java_signature &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;void setStream(java.io.InputStream)&amp;#39;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;setStream&lt;/span&gt;(underlying)
        &lt;span style=&quot;color: #008000&quot;&gt;puts&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Got new stream&amp;quot;&lt;/span&gt;
        &lt;span style=&quot;color: #19177C&quot;&gt;@underlying&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; underlying
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;

    &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# no java_signature necessary here, as it uses the inherited signatures&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;read&lt;/span&gt;(&lt;span style=&quot;color: #666666&quot;&gt;*&lt;/span&gt;args)
        &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# for other signatures, use parent&lt;/span&gt;
        &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;super&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;read(&lt;span style=&quot;color: #666666&quot;&gt;*&lt;/span&gt;args) &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;unless&lt;/span&gt; args&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;empty?

        &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# corrupt bytes randomly, as configured&lt;/span&gt;
        &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008000&quot;&gt;rand&lt;/span&gt;(&lt;span style=&quot;color: #666666&quot;&gt;256&lt;/span&gt;) &lt;span style=&quot;color: #666666&quot;&gt;^&lt;/span&gt; &lt;span style=&quot;color: #19177C&quot;&gt;@underlying&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;read &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #008000&quot;&gt;rand&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&quot;color: #19177C&quot;&gt;@percent&lt;/span&gt;
        &lt;span style=&quot;color: #19177C&quot;&gt;@underlying&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;read
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;

    &lt;span style=&quot;color: #008000&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# if you directly `new` the class, become_java!&lt;/span&gt;
    &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# is called if necessary for concrete-extension classes&lt;/span&gt;
    &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# but you can always ensure it by calling become_java! directly&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;
&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# call the constructor via Java Reflection API&amp;#39;s&lt;/span&gt;
us &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #880000&quot;&gt;ChaosParrot&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;java_class&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;constructor()&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;newInstance
&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# =&amp;gt; ChaosParrot was initialized&lt;/span&gt;
us &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# =&amp;gt; #&amp;lt;ChaosParrot:0x1f2e3d4c&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This means that you can now use any Java object-construction libraries.  Here is a contrived continuation of this example using Spring to construct Ruby objects:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
We use &lt;code&gt;ChaosParrot.java_class.name&lt;/code&gt; to get the full name, as the &lt;code&gt;rubyobj&lt;/code&gt; package is not considered stable release-to-release.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
We also must pass in an appropriate classloader. See below for issues related to classloading reified classes (both concrete and normal) from java.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Instantiating Ruby Objects from Java via Spring&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot; style=&quot;background: #f8f8f8;&quot;&gt;&lt;code data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# ChaosParrot code from above continues here&lt;/span&gt;
maven_require &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;org.springframework&amp;#39;&lt;/span&gt;, &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;spring-context&amp;#39;&lt;/span&gt;,&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;5.3.16&amp;#39;&lt;/span&gt;
&lt;span style=&quot;color: #008000&quot;&gt;require&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;tempfile&amp;#39;&lt;/span&gt;
&lt;span style=&quot;color: #880000&quot;&gt;Tempfile&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;open(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;beans.xml&amp;quot;&lt;/span&gt;) &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;do&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;|&lt;/span&gt;beanxml&lt;span style=&quot;color: #666666&quot;&gt;|&lt;/span&gt;
    &lt;span style=&quot;color: #880000&quot;&gt;File&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;write(beanxml&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;path, &lt;span style=&quot;color: #008000&quot;&gt;%Q|&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008000&quot;&gt;        &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008000&quot;&gt;            &amp;lt;bean id=&amp;quot;myparrot&amp;quot; class=&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #BB6688; font-weight: bold&quot;&gt;#{&lt;/span&gt;&lt;span style=&quot;color: #880000&quot;&gt;ChaosParrot&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;java_class&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;name&lt;span style=&quot;color: #BB6688; font-weight: bold&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008000&quot;&gt;                &amp;lt;property name=&amp;quot;percent&amp;quot; value=&amp;quot;0.25&amp;quot;/&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008000&quot;&gt;            &amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008000&quot;&gt;        &amp;lt;/beans&amp;gt;|&lt;/span&gt;)
    ctx &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; org&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;springframework&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;context&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;support&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;FileSystemXmlApplicationContext&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;new
    ctx&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;config_location &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;file:&lt;/span&gt;&lt;span style=&quot;color: #BB6688; font-weight: bold&quot;&gt;#{&lt;/span&gt;beanxml&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;path&lt;span style=&quot;color: #BB6688; font-weight: bold&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;&lt;/span&gt;
    ctx&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;class_loader &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #880000&quot;&gt;ChaosParrot&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;java_class&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;class_loader &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# See below about classloaders&lt;/span&gt;
    ctx&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;refresh &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# load the beans!&lt;/span&gt;
    &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# =&amp;gt; ChaosParrot was initialized&lt;/span&gt;
    &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# =&amp;gt; Got percent: 0.25&lt;/span&gt;

    &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# ...do stuff with ctx&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Getting type conversion errors about IRubyObject? Ensure you required &lt;code&gt;require 'jruby/core_ext'&lt;/code&gt; as it is a no-op by default for &lt;code&gt;jrubyc&lt;/code&gt; compatibility.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dumping the generated class shows us the method that JRuby generates:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Generated ChaosParrot Structure (disassembled with javap)&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot; style=&quot;background: #f8f8f8;&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;rubyobj&lt;/span&gt;.&lt;span style=&quot;color: #7D9029&quot;&gt;ChaosParrot&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;extends&lt;/span&gt; InputStream &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;implements&lt;/span&gt; ReifiedJavaProxy {
  &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// Java-reflection constructor&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;ChaosParrot&lt;/span&gt;();

  &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// Internal JRuby constructors (::new)&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;ChaosParrot&lt;/span&gt;(Ruby, RubyClass);
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; synthetic &lt;span style=&quot;color: #0000FF&quot;&gt;ChaosParrot&lt;/span&gt;(ConcreteJavaProxy, IRubyObject&lt;span style=&quot;color: #666666&quot;&gt;[]&lt;/span&gt;, Block, Ruby, RubyClass);
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;protected&lt;/span&gt; synthetic &lt;span style=&quot;color: #0000FF&quot;&gt;ChaosParrot&lt;/span&gt;(ConcreteJavaProxy, &lt;span style=&quot;color: #B00040&quot;&gt;boolean&lt;/span&gt;, IRubyObject&lt;span style=&quot;color: #666666&quot;&gt;[]&lt;/span&gt;, Block, Ruby, RubyClass);
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;static&lt;/span&gt; {};

  &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// Our new methods&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;setStream&lt;/span&gt;(InputStream);
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;setPercent&lt;/span&gt;(&lt;span style=&quot;color: #B00040&quot;&gt;float&lt;/span&gt;);

  &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// Overrides for read (all overloads always added)&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;read&lt;/span&gt;();
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;read&lt;/span&gt;(&lt;span style=&quot;color: #B00040&quot;&gt;byte&lt;/span&gt;...);
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;read&lt;/span&gt;(&lt;span style=&quot;color: #B00040&quot;&gt;byte&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;[]&lt;/span&gt;, &lt;span style=&quot;color: #B00040&quot;&gt;int&lt;/span&gt;, &lt;span style=&quot;color: #B00040&quot;&gt;int&lt;/span&gt;);

  &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// bridge methods so super works (Internal JRuby implementation details)&lt;/span&gt;
  &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// Note only 2 here, as read() is abstract in the parent&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; bridge synthetic &lt;span style=&quot;color: #B00040&quot;&gt;int&lt;/span&gt; __super$&lt;span style=&quot;border: 1px solid #FF0000&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt;rubyobj&lt;span style=&quot;border: 1px solid #FF0000&quot;&gt;\&lt;/span&gt;,ChaosParrot$read(&lt;span style=&quot;color: #B00040&quot;&gt;byte&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;[]&lt;/span&gt;);
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; bridge synthetic &lt;span style=&quot;color: #B00040&quot;&gt;int&lt;/span&gt; __super$&lt;span style=&quot;border: 1px solid #FF0000&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt;rubyobj&lt;span style=&quot;border: 1px solid #FF0000&quot;&gt;\&lt;/span&gt;,ChaosParrot$read(&lt;span style=&quot;color: #B00040&quot;&gt;byte&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;[]&lt;/span&gt;, &lt;span style=&quot;color: #B00040&quot;&gt;int&lt;/span&gt;, &lt;span style=&quot;color: #B00040&quot;&gt;int&lt;/span&gt;);

  &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// internal JRuby API (ReifiedJavaProxy)&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; synthetic IRubyObject &lt;span style=&quot;color: #0000FF&quot;&gt;___jruby$rubyObject&lt;/span&gt;();
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; synthetic JavaProxyClass &lt;span style=&quot;color: #0000FF&quot;&gt;___jruby$proxyClass&lt;/span&gt;();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Because internally JRuby has the proxy Java class, as well as the Ruby class, and it needs to initialize both of them no matter if initialized from Ruby code via &lt;code&gt;::new&lt;/code&gt; or Java code via &lt;code&gt;newInstance&lt;/code&gt;, a limitation currently applies to &lt;code&gt;super(&amp;#8230;&amp;#8203;)&lt;/code&gt; calls in the configured constructor method (typically &lt;code&gt;initialize&lt;/code&gt;, see below): there can be at most one &lt;code&gt;super(&amp;#8230;&amp;#8203;)&lt;/code&gt;, with no conditionals over it.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If you are curious how these two halves are initialized together, &lt;a href=&quot;https://github.com/jruby/jruby/pull/6422#issuecomment-748414730&quot;&gt;this initialization diagram&lt;/a&gt; is a good place to start
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One potentially tricky thing, is that of which method to call in initialization. This is particularly acute for JavaFX as the &quot;fxml is loaded&quot; method is called &lt;code&gt;initialize&lt;/code&gt;, shadowing the Ruby constructor of the same name. Luckily, the new constructor support in 9.3 allows reconfiguring many aspects of this interaction, owing to the fact that it is merely a proxy generator for Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the example below, the method defined as &lt;code&gt;#initialize&lt;/code&gt; is never used, as &lt;code&gt;::new&lt;/code&gt; has been redefined (via &lt;code&gt;configure_java_class&lt;/code&gt;) to call &lt;code&gt;#java_ctor&lt;/code&gt;, and calling &lt;code&gt;.initialize&lt;/code&gt; from Java is re-routed to &lt;code&gt;#normal_method&lt;/code&gt;. By default JRuby, excludes &lt;code&gt;#initialize&lt;/code&gt; from generation, so we must explicitly include it here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Class configuration using &lt;code&gt;configure_java_class&lt;/code&gt; is only fully enabled for concrete extension (aka Ruby-subclassing-Java) as of 9.3.4. Non-concrete extension (no Java superclasses) is not fully enabled. There is a bug about this &lt;a href=&quot;https://github.com/jruby/jruby/issues/7122&quot;&gt;issue #7122&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Configuring Java Proxy Class Generation Parameters&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot; style=&quot;background: #f8f8f8;&quot;&gt;&lt;code data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;require&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;jruby/core_ext&amp;#39;&lt;/span&gt; &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# required for become_java! to do anything useful&lt;/span&gt;

&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# configuring classes only works for concrete classes right now (JRuby 9.3.4)&lt;/span&gt;
&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# so we extends java.lang.Object to force this to be a concrete-extended class&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;ConfiguredProxy&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;&amp;lt;&lt;/span&gt; java&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;lang&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;Object
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;initialize&lt;/span&gt;
        &lt;span style=&quot;color: #008000&quot;&gt;puts&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;I shouldn&amp;#39;t be called&amp;quot;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;java_ctor&lt;/span&gt;
        &lt;span style=&quot;color: #008000&quot;&gt;puts&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;The ctor was called&amp;quot;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;standard_method&lt;/span&gt;
        &lt;span style=&quot;color: #008000&quot;&gt;puts&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;The non-ctor was called&amp;quot;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;
    configure_java_class(&lt;span style=&quot;color: #19177C&quot;&gt;ctor_name&lt;/span&gt;: &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;java_ctor&amp;quot;&lt;/span&gt;) &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;do&lt;/span&gt;
        dispatch &lt;span style=&quot;color: #19177C&quot;&gt;:initialize&lt;/span&gt;, &lt;span style=&quot;color: #19177C&quot;&gt;:standard_method&lt;/span&gt; &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# java initialize will call standard_method&lt;/span&gt;
        &lt;span style=&quot;color: #008000&quot;&gt;include&lt;/span&gt; &lt;span style=&quot;color: #19177C&quot;&gt;:initialize&lt;/span&gt; &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# excluded by default&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;
    become_java!
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;
&lt;span style=&quot;color: #880000&quot;&gt;ConfiguredProxy&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;new
&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# =&amp;gt; The ctor was called&lt;/span&gt;
inst &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #880000&quot;&gt;ConfiguredProxy&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;java_class&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;constructor()&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;newInstance
&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# =&amp;gt; The ctor was called&lt;/span&gt;
&lt;span style=&quot;color: #880000&quot;&gt;ConfiguredProxy&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;java_class&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;get_method(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;initialize&amp;quot;&lt;/span&gt;)&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;invoke(inst)
&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# =&amp;gt; The non-ctor was called&lt;/span&gt;

&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# you can stil call standard_method directly too, since&lt;/span&gt;
&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# it wasn&amp;#39;t excluded or redefined&lt;/span&gt;
&lt;span style=&quot;color: #880000&quot;&gt;ConfiguredProxy&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;java_class&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;get_method(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;standard_method&amp;quot;&lt;/span&gt;)&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;invoke(inst)
&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# =&amp;gt; The non-ctor was called&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Decompiling the result shows that some of our changes (&lt;code&gt;dispatch&lt;/code&gt;, &lt;code&gt;include&lt;/code&gt;) are baked into the class file itself, while others (&lt;code&gt;ctor_name&lt;/code&gt;) can still be edited after class generation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Generated ConfiguredProxy (decompiled)&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot; style=&quot;background: #f8f8f8;&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;ConfiguredProxy&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;implements&lt;/span&gt; ReifiedJavaProxy {
   &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// ...bookkeeping fields snipped... (see end for full listing)&lt;/span&gt;
   &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// ...some constructors snipped...&lt;/span&gt;

   &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// Java no-arg constructor&lt;/span&gt;
   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;ConfiguredProxy&lt;/span&gt;() {
      &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;this&lt;/span&gt;(&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; ConcreteJavaProxy(ruby, rubyClass), &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;false&lt;/span&gt;, IRubyObject.&lt;span style=&quot;color: #7D9029&quot;&gt;NULL_ARRAY&lt;/span&gt;, Block.&lt;span style=&quot;color: #7D9029&quot;&gt;NULL_BLOCK&lt;/span&gt;, ruby, rubyClass);
   }

   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;protected&lt;/span&gt; synthetic &lt;span style=&quot;color: #0000FF&quot;&gt;ConfiguredProxy&lt;/span&gt;(ConcreteJavaProxy var1, &lt;span style=&quot;color: #B00040&quot;&gt;boolean&lt;/span&gt; var2, IRubyObject&lt;span style=&quot;color: #666666&quot;&gt;[]&lt;/span&gt; var3, Block var4, Ruby var5, RubyClass var6) {
      &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color: #7D9029&quot;&gt;this$rubyObject&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; var1;
      &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// the splitInitialized &amp;amp; finishInitialize calls here will invoke whichever&lt;/span&gt;
      &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// ruby method is configured as :ctor_name in configure_java_class&lt;/span&gt;
      SplitCtorData state &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; var1.&lt;span style=&quot;color: #7D9029&quot;&gt;splitInitialized&lt;/span&gt;(var2 &lt;span style=&quot;color: #666666&quot;&gt;?&lt;/span&gt; rubyClass : var6, var3, var4, &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;this&lt;/span&gt;$rubyCtorCache);
      &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// snipped bookkeeping...&lt;/span&gt;
         &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;super&lt;/span&gt;();
         var1.&lt;span style=&quot;color: #7D9029&quot;&gt;setObject&lt;/span&gt;(&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;this&lt;/span&gt;);
         var1.&lt;span style=&quot;color: #7D9029&quot;&gt;finishInitialize&lt;/span&gt;(state);
      &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// snipped bookkeeping...&lt;/span&gt;
   }

   &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// Since we didn&amp;#39;t specify the signature, it returns&lt;/span&gt;
   &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// Ruby objects as the default&lt;/span&gt;
   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; IRubyObject &lt;span style=&quot;color: #0000FF&quot;&gt;standard_method&lt;/span&gt;() {
      &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color: #7D9029&quot;&gt;this$rubyObject&lt;/span&gt;.&lt;span style=&quot;color: #7D9029&quot;&gt;ensureThis&lt;/span&gt;(&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;this&lt;/span&gt;);
      &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color: #7D9029&quot;&gt;this$rubyObject&lt;/span&gt;.&lt;span style=&quot;color: #7D9029&quot;&gt;callMethod&lt;/span&gt;(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;standard_method&amp;quot;&lt;/span&gt;);
   }

   &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// the configured dispatch is seen here, dispatching&lt;/span&gt;
   &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// to a differently-named method&lt;/span&gt;
   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; IRubyObject &lt;span style=&quot;color: #0000FF&quot;&gt;initialize&lt;/span&gt;() {
      &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color: #7D9029&quot;&gt;this$rubyObject&lt;/span&gt;.&lt;span style=&quot;color: #7D9029&quot;&gt;ensureThis&lt;/span&gt;(&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;this&lt;/span&gt;);
      &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color: #7D9029&quot;&gt;this$rubyObject&lt;/span&gt;.&lt;span style=&quot;color: #7D9029&quot;&gt;callMethod&lt;/span&gt;(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;standard_method&amp;quot;&lt;/span&gt;);
   }

   &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// No dispatch configuration, uses same name&lt;/span&gt;
   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; IRubyObject &lt;span style=&quot;color: #0000FF&quot;&gt;java_ctor&lt;/span&gt;() {
      &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color: #7D9029&quot;&gt;this$rubyObject&lt;/span&gt;.&lt;span style=&quot;color: #7D9029&quot;&gt;ensureThis&lt;/span&gt;(&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;this&lt;/span&gt;);
      &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color: #7D9029&quot;&gt;this$rubyObject&lt;/span&gt;.&lt;span style=&quot;color: #7D9029&quot;&gt;callMethod&lt;/span&gt;(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;java_ctor&amp;quot;&lt;/span&gt;);
   }

   &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// ...bookkeeping methods snipped...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fields&quot;&gt;3. Fields&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java/JVM fields and Ruby instance variables are different: fields are fixed, and can be public, protected, or private, while instance variables are only protected, but are dynamic. Nonetheless, when porting Java code to Ruby, or vice-versa, they are typically replaced with each other. JRuby, however, exposes fields differently than instance variables. Fields are accessed by named getters and setters on self, and not related to instance variables (you can set a field and an instance variable of the same name to different values!). If you are accessing existing Java objects this is one thing, but how do you create a Java field on a reified Ruby object, whether concrete-extended or not? With &lt;code&gt;java_field&lt;/code&gt;. Here is a contrived example using Jackson, a JSON serializer for Java (Please use one of the ruby serializers in real code, this is just an example of a java library reading fields):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Serializing Reified Ruby Classes with Jackson&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot; style=&quot;background: #f8f8f8;&quot;&gt;&lt;code data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;require&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;jruby/core_ext&amp;#39;&lt;/span&gt; &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# required for become_java! to do anything useful&lt;/span&gt;
maven_require &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;com.fasterxml.jackson.core:jackson-databind&amp;#39;&lt;/span&gt;

&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# If we are a pure ruby class, internal JRuby fields will be present.&lt;/span&gt;
&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# To avoid unnecessary methods and fields on the resulting Java Class,&lt;/span&gt;
&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# we decend from Java Object, not Ruby Object&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;FieldedClass&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;&amp;lt;&lt;/span&gt; java&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;lang&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;Object
    java_field &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;java.lang.String mystr&amp;#39;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;initialize&lt;/span&gt;(mystr &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008000&quot;&gt;nil&lt;/span&gt;)
        &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;super&lt;/span&gt;() &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# j.l.Object requires no args&lt;/span&gt;
        &lt;span style=&quot;color: #008000&quot;&gt;self&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;mystr &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; mystr &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;if&lt;/span&gt; mystr &lt;span style=&quot;color: #666666&quot;&gt;!=&lt;/span&gt; &lt;span style=&quot;color: #008000&quot;&gt;nil&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;
    become_java!
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;
om &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; com&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;fasterxml&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;jackson&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;databind&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;ObjectMapper&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;new
str &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; om&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;write_value_as_string(&lt;span style=&quot;color: #880000&quot;&gt;FieldedClass&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;new(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;))
&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# =&amp;gt; &amp;quot;{\&amp;quot;mystr\&amp;quot;: \&amp;quot;foo\&amp;quot;}&lt;/span&gt;
om&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;read_value(str, &lt;span style=&quot;color: #880000&quot;&gt;FieldedClass&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;java_class)&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;mystr
&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# =&amp;gt; &amp;quot;foo&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This isn&amp;#8217;t very idiomatic Ruby. If we are willing to sacrifice some of the expected semantics of ruby instance variables, we can, as of JRuby 9.3.4, tie the instance variables and the fields together. Instead of being able to store two different values in &lt;code&gt;@name&lt;/code&gt; and &lt;code&gt;self.name&lt;/code&gt;, they are aliases&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Serializing Reified Ruby Classes with Jackson, using Instance Variables&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot; style=&quot;background: #f8f8f8;&quot;&gt;&lt;code data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;InstancedClass&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;&amp;lt;&lt;/span&gt; java&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;lang&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;Object
    java_field &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;java.lang.String mystr&amp;#39;&lt;/span&gt;, &lt;span style=&quot;color: #19177C&quot;&gt;instance_variable&lt;/span&gt;: &lt;span style=&quot;color: #008000&quot;&gt;true&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;initialize&lt;/span&gt;(mystr &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008000&quot;&gt;nil&lt;/span&gt;)
        &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;super&lt;/span&gt;()
        &lt;span style=&quot;color: #19177C&quot;&gt;@mystr&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; mystr &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;if&lt;/span&gt; mystr &lt;span style=&quot;color: #666666&quot;&gt;!=&lt;/span&gt; &lt;span style=&quot;color: #008000&quot;&gt;nil&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;
    become_java!
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;
str &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; om&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;write_value_as_string(&lt;span style=&quot;color: #880000&quot;&gt;InstancedClass&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;new(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;))
&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# =&amp;gt; &amp;quot;{\&amp;quot;mystr\&amp;quot;: \&amp;quot;foo\&amp;quot;}&lt;/span&gt;
om&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;read_value(str, &lt;span style=&quot;color: #880000&quot;&gt;InstancedClass&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;java_class)&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;mystr
&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# =&amp;gt; &amp;quot;foo&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;code&gt;@name.equals?(@name)&lt;/code&gt; may be false in some cases when using this configuration
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
A frozen object can have all instance variables using this configuration modified. Instance variables using this configuration  do not respect if an object is frozen or not.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
JVM semantics, not Ruby Semantics, apply when using this configuration
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Disassembling, we see this has no affect on the generated proxy class:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Generated InstancedClass &amp;amp; FieldedClass Structure (disassembled with javap)&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot; style=&quot;background: #f8f8f8;&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;FieldedClass&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;implements&lt;/span&gt; ReifiedJavaProxy {
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; java.&lt;span style=&quot;color: #7D9029&quot;&gt;lang&lt;/span&gt;.&lt;span style=&quot;color: #7D9029&quot;&gt;String&lt;/span&gt; mystr;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;FieldedClass&lt;/span&gt;();
  &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// snipped internal ctors and internal JRuby API methods&lt;/span&gt;
}
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;InstancedClass&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;implements&lt;/span&gt; ReifiedJavaProxy {
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; java.&lt;span style=&quot;color: #7D9029&quot;&gt;lang&lt;/span&gt;.&lt;span style=&quot;color: #7D9029&quot;&gt;String&lt;/span&gt; mystr;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;InstancedClass&lt;/span&gt;();
  &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// snipped internal ctors and internal JRuby API methods&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;annotations&quot;&gt;4. Annotations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JRuby 9.3 partly unified the annotation API between &lt;code&gt;become_java!&lt;/code&gt; on a pure-ruby class, a concrete-extension Ruby class, and using &lt;code&gt;jrubyc&lt;/code&gt; (class-methods only, package and class annotations are not mutually supported). Now the class methods work equally well and with the same syntax:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot; style=&quot;background: #f8f8f8;&quot;&gt;&lt;code data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;MyClass&lt;/span&gt;
    java_field &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;full.Type name&amp;#39;&lt;/span&gt;
    java_field &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;@full.Annotation() full.Type name&amp;#39;&lt;/span&gt;

    java_signature &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;full.Type myMethod(primitive, full.Type)&amp;#39;&lt;/span&gt;
    java_signature &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;@full.Annotation() full.Type myMethod(primitive, full.Type)&amp;#39;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;myMethod&lt;/span&gt;(&lt;span style=&quot;color: #666666&quot;&gt;*&lt;/span&gt;args)
        &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;#...&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can extend the example from the previous section to have annotations that affect the behavior of Java libraries:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Annotations on Generated Java Classes with Jackson&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot; style=&quot;background: #f8f8f8;&quot;&gt;&lt;code data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;maven_require &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;com.fasterxml.jackson.core&amp;#39;&lt;/span&gt;, &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;jackson-databind&amp;#39;&lt;/span&gt;

&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# we extend the Java Object for the same reasons as the previuos example&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;AnnotatedClass&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;&amp;lt;&lt;/span&gt; java&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;lang&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;Object
    &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# Note we can&amp;#39;t use java_annotation ouside of the class, that is jrubyc only&lt;/span&gt;
    add_class_annotations com&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;fasterxml&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;jackson&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;annotation&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;JsonRootName &lt;span style=&quot;color: #666666&quot;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;value&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;}

    java_field &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;@com.fasterxml.jackson.annotation.JsonIgnore java.lang.String mystr&amp;#39;&lt;/span&gt;
    java_field &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;int myint&amp;#39;&lt;/span&gt;

    java_signature &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;@com.fasterxml.jackson.annotation.JsonSetter(value=&amp;quot;phantom&amp;quot;) void printItOut(boolean)&amp;#39;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;printItOut&lt;/span&gt;(&lt;span style=&quot;color: #008000&quot;&gt;p&lt;/span&gt;)
        &lt;span style=&quot;color: #008000&quot;&gt;puts&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Phantom set to: &lt;/span&gt;&lt;span style=&quot;color: #BB6688; font-weight: bold&quot;&gt;#{&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;p&lt;/span&gt;&lt;span style=&quot;color: #BB6688; font-weight: bold&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;
    become_java!
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;
om &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; com&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;fasterxml&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;jackson&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;databind&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;ObjectMapper&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;new
om&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;enable(com&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;fasterxml&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;jackson&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;databind&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;SerializationFeature&lt;span style=&quot;color: #666666&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color: #880000&quot;&gt;WRAP_ROOT_VALUE&lt;/span&gt;)
om&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;write_value_as_string(&lt;span style=&quot;color: #880000&quot;&gt;AnnotatedClass&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;new&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;tap{&lt;span style=&quot;color: #666666&quot;&gt;|&lt;/span&gt;x&lt;span style=&quot;color: #666666&quot;&gt;|&lt;/span&gt;x&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;myint&lt;span style=&quot;color: #666666&quot;&gt;=9&lt;/span&gt;})
&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# =&amp;gt; &amp;quot;{\&amp;quot;user\&amp;quot;:{\&amp;quot;myint\&amp;quot;:9}}&amp;quot;&lt;/span&gt;
ac &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; om&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;read_value(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;{&amp;quot;myint&amp;quot;:314,&amp;quot;phantom&amp;quot;:true}&amp;#39;&lt;/span&gt;, &lt;span style=&quot;color: #880000&quot;&gt;AnnotatedClass&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;java_class)
&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# Phantom set to: true&lt;/span&gt;
ac&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;myint
&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# =&amp;gt; 314&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Can I avoid typing the package name of the class? Not as of JRuby 9.3. It is &lt;a href=&quot;https://github.com/jruby/jruby/issues/5486&quot;&gt;issue #5486&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Examining the generated class, we can see it did annotate as we requested:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Generated AnnotatedClass Structure (decompiled)&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot; style=&quot;background: #f8f8f8;&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #AA22FF&quot;&gt;@JsonRootName&lt;/span&gt;(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;)
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;AnnotatedClass&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;implements&lt;/span&gt; ReifiedJavaProxy {
   &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// snipped private implementation fields&lt;/span&gt;

   &lt;span style=&quot;color: #AA22FF&quot;&gt;@JsonIgnore&lt;/span&gt;
   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; String mystr;

   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;int&lt;/span&gt; myint;

   &lt;span style=&quot;color: #AA22FF&quot;&gt;@JsonSetter&lt;/span&gt;(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;phantom&amp;quot;&lt;/span&gt;)
   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;printItOut&lt;/span&gt;(&lt;span style=&quot;color: #B00040&quot;&gt;boolean&lt;/span&gt; var1) {
      &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// ...&lt;/span&gt;
   }
   &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// snipped internal JRuby API parts&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jrubyfx-2-0&quot;&gt;5. JRubyFX 2.0&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After all of these changes in JRuby 9.3.4, the JRubyFX gem can finally dump its FXML hacks and use the existing FXMLLoader by taking advantage of these new features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, how does JRubyFX use these features for loading FXML?
Every request for loading FXML starts by us loading the file and pulling out all the expected field names from the &lt;code&gt;fx:id&lt;/code&gt; attributes, and the &lt;code&gt;onEvent&lt;/code&gt; expected event handlers
For each of these names, we call java_field with the FXML annotation, field name, and request that the instance variables are mapped to the fields. This makes the API seem more Ruby-like while two copies of variables. Additionally, most of the pitfalls are likely avoided as these instance variables are typically read, not written, once the FXML file has been loaded.
For each of the event handlers, we define an appropriate event handler method using &lt;code&gt;java_method&lt;/code&gt; with the fxml annotation and event handler name
We configure the class for a Java-accessible constructor
We call &lt;code&gt;become_java!&lt;/code&gt; and pass the concrete-extended reified class off to the JavaFX FXMLLoader&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As such, users can experience a straightforward integration experience. For example, while the JVM class is a static and unchangeable interface, by defining all the expected methods and fields, user Ruby code can muck with the class as long as those methods stay defined.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are some snippets of the above features when integrated into JRubyFX use. Plus, some of the interesting bits of the JRubyFX implementation. See the full working example these were taken from under &lt;a href=&quot;https://github.com/jruby/jrubyfx/tree/master/samples/contrib/fxmltableview&quot;&gt;samples/contrib/fxmltableview&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
I recommend using Zulu+FX JDK builds for JRubyFX as it is pre-packaged with JavaFX, but any JDK with JavaFX should work (Java 8 and later)
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Fragments of fxmlloader JRubyFX example &amp;amp; JRubyFX implementation&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot; style=&quot;background: #f8f8f8;&quot;&gt;&lt;code data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# user usage&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;FormattedTableCellFactory&lt;/span&gt;
  &lt;span style=&quot;color: #008000&quot;&gt;include&lt;/span&gt; &lt;span style=&quot;color: #880000&quot;&gt;Java&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;::&lt;/span&gt;javafx&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;util&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;Callback
  &lt;span style=&quot;color: #008000&quot;&gt;include&lt;/span&gt; &lt;span style=&quot;color: #880000&quot;&gt;JRubyFX&lt;/span&gt;

  &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# see below for fxml_raw_accessor definition&lt;/span&gt;
  fxml_raw_accessor &lt;span style=&quot;color: #19177C&quot;&gt;:alignment&lt;/span&gt;, &lt;span style=&quot;color: #880000&quot;&gt;Java&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;::&lt;/span&gt;javafx&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;scene&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;text&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;TextAlignment
  fxml_raw_accessor &lt;span style=&quot;color: #19177C&quot;&gt;:format&lt;/span&gt;, java&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;text&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;Format

  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;call&lt;/span&gt;(param)
    cell &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #880000&quot;&gt;FormattedTableCellFactory_TableCell&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;new(&lt;span style=&quot;color: #19177C&quot;&gt;@format&lt;/span&gt;)
    cell&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;setTextAlignment(&lt;span style=&quot;color: #19177C&quot;&gt;@alignment&lt;/span&gt;)
    &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# ...&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;
  &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# ...&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;

&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# library definition&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;module&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;JRubyFX&lt;/span&gt;
    &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# ...&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;fxml_raw_accessor&lt;/span&gt;(symbol_name, type&lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt;java&lt;span style=&quot;color: #666666&quot;&gt;::&lt;/span&gt;lang&lt;span style=&quot;color: #666666&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;String&lt;/span&gt;)
      &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# ...&lt;/span&gt;
      &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# fieldNameGetType() is an extention to standard bean style&lt;/span&gt;
      &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# getters/setters in JavaFX&lt;/span&gt;
      java_signature &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;java.lang.Class &amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;+&lt;/span&gt; symbol_name&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;id2name &lt;span style=&quot;color: #666666&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;GetType()&amp;quot;&lt;/span&gt;
      &lt;span style=&quot;color: #008000&quot;&gt;send&lt;/span&gt;(&lt;span style=&quot;color: #19177C&quot;&gt;:define_method&lt;/span&gt;, symbol_name&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;id2name &lt;span style=&quot;color: #666666&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;GetType&amp;quot;&lt;/span&gt;) &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;do&lt;/span&gt;
        &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;return&lt;/span&gt; type&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;java_class
      &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;
      &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# define the field as fxml-capable&lt;/span&gt;
      java_field &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;@javafx.fxml.FXML &lt;/span&gt;&lt;span style=&quot;color: #BB6688; font-weight: bold&quot;&gt;#{&lt;/span&gt;type&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;java_class&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;name&lt;span style=&quot;color: #BB6688; font-weight: bold&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #BB6688; font-weight: bold&quot;&gt;#{&lt;/span&gt;symbol_name&lt;span style=&quot;color: #BB6688; font-weight: bold&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span style=&quot;color: #19177C&quot;&gt;instance_variable&lt;/span&gt;: &lt;span style=&quot;color: #008000&quot;&gt;true&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;

&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# user usage&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;FXMLTableViewController&lt;/span&gt;
  &lt;span style=&quot;color: #008000&quot;&gt;include&lt;/span&gt; &lt;span style=&quot;color: #880000&quot;&gt;JRubyFX&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color: #880000&quot;&gt;Controller&lt;/span&gt;

  &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# this method call defines all the methods and fields in the provided file&lt;/span&gt;
  fxml &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;fxml_tableview.fxml&amp;quot;&lt;/span&gt;

  &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# event handler from the fxml&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;addPerson&lt;/span&gt;
    &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# the tableview and the fields are&lt;/span&gt;
    &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# accessable as instance variables&lt;/span&gt;
    data &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #19177C&quot;&gt;@tableView&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;items
    data&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;add(&lt;span style=&quot;color: #880000&quot;&gt;Person&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;new(&lt;span style=&quot;color: #19177C&quot;&gt;@firstNameField&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;text, &lt;span style=&quot;color: #666666&quot;&gt;...&lt;/span&gt;))

    &lt;span style=&quot;color: #19177C&quot;&gt;@firstNameField&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;text &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# ...&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;
  &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# ...&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;

&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# library definition&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;module&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;JRubyFX::FxmlHelper&lt;/span&gt;
    &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# ...&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;self&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000FF&quot;&gt;transform&lt;/span&gt;(clazz, &lt;span style=&quot;color: #666666&quot;&gt;...&lt;/span&gt;) &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# called by fxml in the user code above&lt;/span&gt;
        &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# ...&lt;/span&gt;
        &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;while&lt;/span&gt; xmlStreamReader&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;hasNext
            &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# lots of xml processing ...&lt;/span&gt;

            &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# if it is an id, save the id and annotate it as injectable by JavaFX. Default to object since the FXMLLoader doesn&amp;#39;t care...&lt;/span&gt;
            &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;if&lt;/span&gt; localName &lt;span style=&quot;color: #666666&quot;&gt;==&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;and&lt;/span&gt; prefix &lt;span style=&quot;color: #666666&quot;&gt;==&lt;/span&gt; &lt;span style=&quot;color: #880000&quot;&gt;FXMLLoader&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color: #880000&quot;&gt;FX_NAMESPACE_PREFIX&lt;/span&gt;
              clazz&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;instance_eval &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;do&lt;/span&gt;
                &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# Note: we could detect the type, but Ruby doesn&amp;#39;t care, and neither does JavaFX&amp;#39;s FXMLLoader&lt;/span&gt;
                java_field &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;@javafx.fxml.FXML java.lang.Object &lt;/span&gt;&lt;span style=&quot;color: #BB6688; font-weight: bold&quot;&gt;#{&lt;/span&gt;value&lt;span style=&quot;color: #BB6688; font-weight: bold&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span style=&quot;color: #19177C&quot;&gt;instance_variable&lt;/span&gt;: &lt;span style=&quot;color: #008000&quot;&gt;true&lt;/span&gt;
              &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;
            &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# otherwise, if it is an event, add a forwarding call&lt;/span&gt;
            &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;elsif&lt;/span&gt; localName&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;start_with? &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;on&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;and&lt;/span&gt; value&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;start_with? &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;
              &lt;span style=&quot;color: #008000&quot;&gt;name&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; value&lt;span style=&quot;color: #666666&quot;&gt;[1..-1]&lt;/span&gt; &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# strip hash&lt;/span&gt;
              clazz&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;instance_eval &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;do&lt;/span&gt;
                &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# add the fxml signature and correct param count&lt;/span&gt;
                java_signature &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;@javafx.fxml.FXML void &lt;/span&gt;&lt;span style=&quot;color: #BB6688; font-weight: bold&quot;&gt;#{&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #BB6688; font-weight: bold&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;(javafx.event.Event)&amp;quot;&lt;/span&gt;
              &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;
            &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;
            &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# ...&lt;/span&gt;
        &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;
        &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# ...&lt;/span&gt;
        clazz&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;become_java!
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;fxmltableview sample FXML selection (fxml_tableview.fxml)&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot; style=&quot;background: #f8f8f8;&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;GridPane&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;alignment=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;CENTER&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;hgap=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;10.0&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;vgap=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;10.0&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;xmlns:fx=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;http://javafx.com/fxml&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;&amp;lt;!-- saved in the controller instance variable --&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;TableView&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;fx:id=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;tableView&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;GridPane.columnIndex=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;GridPane.rowIndex=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;columns&amp;gt;&lt;/span&gt;
      &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;TableColumn&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;prefWidth=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;100.0&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;text=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;First Name&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;fx:id=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;firstNameColumn&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;cellFactory&amp;gt;&lt;/span&gt;
          &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;&amp;lt;!-- Build our Ruby class, defined above --&amp;gt;&lt;/span&gt;
          &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;FormattedTableCellFactory&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;alignment=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;CENTER&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;/cellFactory&amp;gt;&lt;/span&gt;
        &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
      &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;/TableColumn&amp;gt;&lt;/span&gt;
      &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;/columns&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;/TableView&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;HBox&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;alignment=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;BOTTOM_RIGHT&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;spacing=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;10.0&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;GridPane.columnIndex=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;GridPane.rowIndex=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;TextField&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;fx:id=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;firstNameField&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;prefWidth=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;90.0&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;promptText=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;First Name&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;&amp;lt;!-- tied to a our controller method --&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;Button&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;onAction=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;#addPerson&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;text=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Add&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;/HBox&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;/GridPane&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Decompiling some of these classes, we can see the generated fields, method, constructors, and annotations:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Select Decompiled Generated Classes from fxmltableview Sample&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot; style=&quot;background: #f8f8f8;&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;FormattedTableCellFactory&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;extends&lt;/span&gt; RubyObject &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;implements&lt;/span&gt; Reified, Callback {
   &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// snip...&lt;/span&gt;
   &lt;span style=&quot;color: #AA22FF&quot;&gt;@FXML&lt;/span&gt;
   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; TextAlignment alignment;
   &lt;span style=&quot;color: #AA22FF&quot;&gt;@FXML&lt;/span&gt;
   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; Format format;

   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;FormattedTableCellFactory&lt;/span&gt;();

   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; TextAlignment &lt;span style=&quot;color: #0000FF&quot;&gt;getAlignment&lt;/span&gt;();
   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;setAlignment&lt;/span&gt;(TextAlignment var1);
   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; Class &lt;span style=&quot;color: #0000FF&quot;&gt;alignmentGetType&lt;/span&gt;();

   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; Format &lt;span style=&quot;color: #0000FF&quot;&gt;getFormat&lt;/span&gt;();
   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;setFormat&lt;/span&gt;(Format var1);
   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; Class &lt;span style=&quot;color: #0000FF&quot;&gt;formatGetType&lt;/span&gt;();

   &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// snip...&lt;/span&gt;
}
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;FXMLTableViewController&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;extends&lt;/span&gt; RubyObject &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;implements&lt;/span&gt; Reified {
   &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// snip...&lt;/span&gt;
   &lt;span style=&quot;color: #AA22FF&quot;&gt;@FXML&lt;/span&gt;
   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; Object tableView;
   &lt;span style=&quot;color: #AA22FF&quot;&gt;@FXML&lt;/span&gt;
   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; Object firstNameColumn;
   &lt;span style=&quot;color: #AA22FF&quot;&gt;@FXML&lt;/span&gt;
   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; Object firstNameField;
   &lt;span style=&quot;color: #AA22FF&quot;&gt;@FXML&lt;/span&gt;
   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; Object lastNameField;
   &lt;span style=&quot;color: #AA22FF&quot;&gt;@FXML&lt;/span&gt;
   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; Object emailField;

   &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// Event Handler&lt;/span&gt;
   &lt;span style=&quot;color: #AA22FF&quot;&gt;@FXML&lt;/span&gt;
   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;addPerson&lt;/span&gt;(Event var1);

   &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// snip...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;gotchas-classloading-ruby-classes&quot;&gt;6. Gotchas: Classloading Ruby Classes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are looking up and building Ruby objects from Java code or libraries, pay attention to the classloaders. As of JRuby 9.3.4, no supported built-in way exists to look up reified Ruby classes from Java. If you only need to build one class, you can do what the above Spring demo did, and pass in the single-class classloader of the reified class: &lt;code&gt;MyClass.java_class.classloader&lt;/code&gt;. If you need multiple class lookup, you need to write a new classloader.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is a slightly modified version of the JRubyFX classloader that may be a helpful jumping off point. Note that you must decide where to &quot;mount&quot; your classes, as the built-in &lt;code&gt;rubyobj&lt;/code&gt; is not guaranteed to be stable. This mounts all Ruby classes under &quot;Object&quot;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Reified Ruby Classloader for Java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot; style=&quot;background: #f8f8f8;&quot;&gt;&lt;code data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# This is a minimal classloader only for classes, resources not supported&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;PolyglotClassLoader&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;&amp;lt;&lt;/span&gt; java&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;lang&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;ClassLoader
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;initialize&lt;/span&gt;()
      &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;super&lt;/span&gt;(&lt;span style=&quot;color: #880000&quot;&gt;JRuby&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;runtime&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;jruby_class_loader)
      &lt;span style=&quot;color: #19177C&quot;&gt;@prefix&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Object.&amp;quot;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;
    java_signature &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;java.lang.Class findClass(java.lang.String name)&amp;quot;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;findClass&lt;/span&gt;(a)
      &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008000&quot;&gt;nil&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;unless&lt;/span&gt; a&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;start_with? &lt;span style=&quot;color: #19177C&quot;&gt;@prefix&lt;/span&gt;
      a &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; a&lt;span style=&quot;color: #666666&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #19177C&quot;&gt;@prefix&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;length&lt;span style=&quot;color: #666666&quot;&gt;..-1]&lt;/span&gt; &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# trim prefix&lt;/span&gt;
      &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;begin&lt;/span&gt;
        &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;return&lt;/span&gt; a&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;
            &lt;span style=&quot;color: #008000&quot;&gt;split&lt;/span&gt;(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;)&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;
            inject(&lt;span style=&quot;color: #880000&quot;&gt;Object&lt;/span&gt;){ &lt;span style=&quot;color: #666666&quot;&gt;|&lt;/span&gt;value, &lt;span style=&quot;color: #008000&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;|&lt;/span&gt;
                value&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;const_get(&lt;span style=&quot;color: #008000&quot;&gt;name&lt;/span&gt;)
            }&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;tap{&lt;span style=&quot;color: #666666&quot;&gt;|&lt;/span&gt;x&lt;span style=&quot;color: #666666&quot;&gt;|&lt;/span&gt;
                x&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;become_java!
            }&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;java_class
      &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;rescue&lt;/span&gt; &lt;span style=&quot;color: #880000&quot;&gt;NameError&lt;/span&gt;
        &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;raise&lt;/span&gt; java&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;lang&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;ClassNotFoundException&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;new(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Could not find Ruby or Java class &amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BB6688; font-weight: bold&quot;&gt;#{&lt;/span&gt;a&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;gsub(&lt;span style=&quot;color: #BB6688&quot;&gt;/[.$]/&lt;/span&gt;, &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;::&amp;quot;&lt;/span&gt;)&lt;span style=&quot;color: #BB6688; font-weight: bold&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39; or &amp;#39;&lt;/span&gt;&lt;span style=&quot;color: #BB6688; font-weight: bold&quot;&gt;#{&lt;/span&gt;a&lt;span style=&quot;color: #BB6688; font-weight: bold&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;&amp;quot;&lt;/span&gt;) &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# Must be a java CNF, not a Ruby Name Error&lt;/span&gt;
      &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;
    become_java!
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;7. Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new features in 9.3.4 make it much easier to integrate Ruby code with Java code doing lots of reflection. Happy Hacking!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
    </entry>
  
    <entry>
      <title>Performance Improvements in JRuby 9.0.3.0</title>
      <link href="http://blog.jruby.org/2015/10/performance_improvements_in_jruby_9030"/>
      <updated>2015-10-21T00:00:00-04:00</updated>
      <id>http://blog.jruby.org/2015/10/performance_improvements_in_jruby_9030</id>
      <author>
        <name>Charles Oliver Nutter</name>
        <email>headius@headius.com</email>
      </author>
      <content type="html">&lt;p&gt;With the release of JRuby 9000, we promised you’d see our new runtime start to shine in update releases. Now, it’s starting to happen.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jruby.org/2015/10/21/jruby-9-0-3-0.html&quot;&gt;JRuby 9.0.3.0&lt;/a&gt; has been released with three key performance improvements we’re very excited about.&lt;/p&gt;

&lt;h2 id=&quot;lightweight-postfix-rescues&quot;&gt;Lightweight Postfix Rescues&lt;/h2&gt;

&lt;p&gt;One of the most convenient anti-patterns in Ruby is the ability to add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rescue&lt;/code&gt; to any expression, capturing all StandardError descendants and instead returning another expression. You see this pattern a lot in code where any exception raised has a trivial fallback.&lt;/p&gt;

&lt;p&gt;Unfortunately, exceptions can be very expensive on the JVM. For various reasons, when the JVM generates a stack trace, it has to do much more work than a runtime like CRuby: combining interpreted calls and compiled calls, breaking apart inlined code, omitting or reformatting internal calls. Generating a 1000-deep stack trace on the JVM can cost in the neighborhood of a few milliseconds.&lt;/p&gt;

&lt;p&gt;This doesn’t sound like a lot until you start raising thousands of exceptions every second.&lt;/p&gt;

&lt;p&gt;Here’s an example from csv.rb, Ruby’s standard library for CSV parsing.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;no&quot;&gt;Converters&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;integer:   &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
                    &lt;span class=&quot;no&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ConverterEncoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;
                  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                  &lt;span class=&quot;ss&quot;&gt;float:     &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
                    &lt;span class=&quot;no&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ConverterEncoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;
                  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ruby’s CSV library can automatically convert values to Ruby types as they are read. It does this by cascading attempts from one converter to the next using trivial rescues to capture any errors. Each converter executes in turn until one of them is able to convert the incoming data successfully.&lt;/p&gt;

&lt;p&gt;Unfortunately, before 9.0.3.0, this had a tremendous impact on performance. Every exception raised here had to generate a very expensive stack trace…ultimately causing CSV value conversions to spend all their time in the guts of the JVM processing stack trace frames.&lt;/p&gt;

&lt;p&gt;We received a &lt;a href=&quot;https://github.com/jruby/jruby/issues/3348&quot;&gt;bug report&lt;/a&gt; showing JRuby processing and converting CSV almost 30x slower than CRuby, and we knew we had to do something.&lt;/p&gt;

&lt;p&gt;Luckily, with our new runtime, it was easy for to make improvements. Credit goes to Tom Enebo for this &lt;a href=&quot;https://github.com/jruby/jruby/issues/3348#issuecomment-145081388&quot;&gt;excellent work&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Inspect the expression provided for a rescue to see if it is trivial (local variable, constant value, etc).&lt;/li&gt;
  &lt;li&gt;If trivial, entering the rescued code sets a thread-local flag indicating no stack trace will be needed.&lt;/li&gt;
  &lt;li&gt;When raising exceptions, we can now omit stack traces we know will never be used.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The result? Trivial rescues are now over &lt;a href=&quot;https://github.com/jruby/jruby/commit/fb4dcb4ee17a2b6bff8f6c7be8a334cc8b1c6d78&quot;&gt;40x faster than before&lt;/a&gt; and JRuby handles CSV with conversions considerably faster than CRuby.&lt;/p&gt;

&lt;p&gt;Note that this optimization only works when the lightweight rescue is directly upstream from the exception it captures. If there are intevening heavyweight rescues, we can’t optimize the stack trace away.&lt;/p&gt;

&lt;h2 id=&quot;independently-jitting-blocks&quot;&gt;Independently Jitting Blocks&lt;/h2&gt;

&lt;p&gt;You can see from the CSV code snippit above that the converters are held in a hash mapping symbols to lambda expressions. This was another case that needed fixing.&lt;/p&gt;

&lt;p&gt;JRuby’s JIT has always occurred at method boundaries. If a method is called enough times, we compile it to JVM bytecode. However, there are libraries like CSV where the hot code is not contained within a method…it is a free-standing lambda or proc defined in a script or class body. Because of the limitations of our old JIT, this code would only run in the interpreter, which is generally many times slower than compiled JVM bytecode.&lt;/p&gt;

&lt;p&gt;This is frequently compounded by the metaprogramming method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Module#define_method&lt;/code&gt;, which allows you to define a new method using only a Ruby block. These definitions usually don’t occur within a method (or at least not within a method we JIT), so they too would never JIT.&lt;/p&gt;

&lt;p&gt;In JRuby 9.0.3.0, I finally fixed this by modifying blocks to have their own independent call counters and JIT cycle. If a block is called enough times (currently the same 50-call threshold as methods), they will JIT into JVM bytecode even if the surrounding scope does not. We’ve promised this for years, but it wasn’t until our new runtime that we were able to make it possible.&lt;/p&gt;

&lt;p&gt;This improvement makes formerly unjittable blocks anywhere from 5x to 20x faster than they were before.&lt;/p&gt;

&lt;p&gt;And speaking of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;define_method&lt;/code&gt;…&lt;/p&gt;

&lt;h2 id=&quot;define_method-methods&quot;&gt;define_method Methods&lt;/h2&gt;

&lt;p&gt;For years we’ve wanted to be able to optimize &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;define_method&lt;/code&gt; methods just like regular methods. The block JIT changes above certainly help that, but it is well known that blocks still have a more overhead (lexical context, heap-based local variables) than regular method bodies.&lt;/p&gt;

&lt;p&gt;Once again our new runtime comes to the rescue. Thanks to additional work by Tom, JRuby 9.0.3.0 will now optimize non-capturing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;define_method&lt;/code&gt; methods (i.e. those that do not access variables from their lexical enclosure) as if they were normal methods. No extra context must be managed, no variables need to go on the heap, and all optimizations that apply to methods work just fine.&lt;/p&gt;

&lt;p&gt;For cases where this optimization applies, you’ll see almost no difference in performance between a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;define_method&lt;/code&gt; method and one defined with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;def&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;We don’t plan to stop here, either. For future releases, we plan to make capturing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;define_method&lt;/code&gt; methods also optimize like regular methods, modulo any context we can’t optimize away. Ideally, these methods should have only a small amount of overhead (or none at all) compared to their regular non-metaprogrammed siblings.&lt;/p&gt;

&lt;h2 id=&quot;more-to-come&quot;&gt;More to Come&lt;/h2&gt;

&lt;p&gt;We’re very happy with how JRuby 9000 has been received (our most stable, most compatible, and fastest JRuby ever) and we’ll continue to push the limits of what Ruby can do on the JVM (and what Ruby can do in general).&lt;/p&gt;

&lt;p&gt;We’d love to hear what you’re doing with Ruby and JRuby and encourage you to &lt;a href=&quot;http://jruby.org/community&quot;&gt;join our community&lt;/a&gt;!&lt;/p&gt;

</content>
    </entry>
  
    <entry>
      <title>JRuby 9000</title>
      <link href="http://blog.jruby.org/2015/07/jruby_9000"/>
      <updated>2015-07-22T00:00:00-04:00</updated>
      <id>http://blog.jruby.org/2015/07/jruby_9000</id>
      <author>
        <name>The JRuby Team</name>
        <email>team@jruby.org</email>
      </author>
      <content type="html">&lt;p&gt;After years of work, we’re proud to announce the release of &lt;a href=&quot;http://jruby.org/2015/07/22/jruby-9-0-0-0.html&quot;&gt;JRuby 9000&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;JRuby is an implementation of the Ruby programming language atop the Java virtual machine, bringing true parallelism, increased performance, and top-notch garbage collectors to the Ruby world. You can call into other JVM languages, deploy on Java servers, and take advantage of the massive Java tooling ecosystem. At the same time, “It’s Just Ruby”… we pride ourselves on compatibility and on being a Ruby implementation &lt;em&gt;first&lt;/em&gt;, and a JVM language &lt;em&gt;second&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We’ve put an enormous amount of effort into this release, and we wanted to share with you why we’re so excited.&lt;/p&gt;

&lt;h2 id=&quot;compatibility&quot;&gt;Compatibility&lt;/h2&gt;

&lt;p&gt;During JRuby 1.7.x we had the brilliant idea to support multiple compatibility
levels of Ruby from the same runtime.  If you passed ‘–1.8’ you would be
running JRuby in 1.8.7 compatibility mode. Passing ‘–1.9’ would be running
in1.9.3 compatibility mode.&lt;/p&gt;

&lt;p&gt;As it turned out this ended up being extremely messy internally.  We were forced
to start versioning method names (e.g. inspect or
inspect19).  We would get bug reports where we had a 1.9 method
calling a 1.8 method which did the wrong thing.  We confused people making
native extensions – “which method do I call?”  In hindsight, this idea was
too difficult to maintain.&lt;/p&gt;

&lt;p&gt;For JRuby 9000 we only support a single version of Ruby.  For 9.0.0.0 we will
support Ruby 2.2, the current version of Ruby.  As new versions of Ruby come out you should expect to see
a version of JRuby come out that supports the same features.&lt;/p&gt;

&lt;h2 id=&quot;versioning&quot;&gt;Versioning&lt;/h2&gt;

&lt;p&gt;JRuby 9000 is the ninth major release of JRuby. We opted to go with 9000 as a code name and 9.0.0.0 as a version number to separate it from Ruby’s version numbers (1.8, 1.9, 2.0 etc). We frequently ran into confusion about our version numbers versus Ruby’s, and neither “1.8” nor “2.0” would do anything but make that worse.&lt;/p&gt;

&lt;p&gt;Going forward, expect to see maintenance releases versioned as 9.0.x and Ruby compatibility updates numbered as 9.x.&lt;/p&gt;

&lt;h2 id=&quot;new-runtime&quot;&gt;New Runtime&lt;/h2&gt;

&lt;p&gt;More than five years ago Subramanya Sastry (subbu) expressed an interest in
helping us work on a new runtime for JRuby.  It was based, in part, on his
PhD experience designing a static optimizing compiler for Java.  From this
beginning, we have worked with subbu to build a new runtime (called IR) which
will look pretty familiar to anyone who has ever taken a compiler course in
college.&lt;/p&gt;

&lt;p&gt;For JRuby 9000, this new runtime runs things about as fast as JRuby 1.7 but we
have years worth of plans for improving performance.  At this point, we are
only executing conservative static optimizations. Over the next several months
we will start enabling profiled optimizations and things will start to get
exciting.  The ability to perform more aggressive optimizations like unboxed
math and inlining methods and the blocks they call will open up
an entire new dimension for JRuby’s performance.&lt;/p&gt;

&lt;p&gt;IR is the beginning of a new road for performance for JRuby.  We hope to
ship continual performance improvements during our point releases.&lt;/p&gt;

&lt;h2 id=&quot;native-process-and-io&quot;&gt;Native Process and IO&lt;/h2&gt;

&lt;p&gt;During the JRuby 9000 dev cycle, we decided it was time to improve the POSIX behavior of our Process and IO subsystems.
In C Ruby, IO and Process are implemented directly atop the standard C library functions. As a result, they reflect behaviors
often hidden when running Java applications, where those APIs are wrapped in many layers of abstraction. For example, a
subprocess launched from Java can’t be read from in a nonblocking way, can’t be signaled, can’t inherit open files and
from the parent process, and many other limitations. In short, we realized we’d need to go native to be truly compatible.&lt;/p&gt;

&lt;p&gt;JRuby 9000 now uses native operations for much of IO and almost all of Process. This makes us the first
POSIX-friendly JVM language, with full support for spawning processes, inheriting open streams, perfoming nonblocking
operations on all types of IO, and generally fitting well into a POSIX environment.&lt;/p&gt;

&lt;h2 id=&quot;years-of-work&quot;&gt;Years of Work&lt;/h2&gt;

&lt;p&gt;We first started talking about the next JRuby a few years ago, and the IR work started years before that. JRuby 9000 represents
the largest (by far!) release we’ve ever done.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Just counting the time since we branched, there have been over 5500 commits by 104 contributors. That’s a rate of 7 commits
&lt;em&gt;per day&lt;/em&gt; for two years.&lt;/li&gt;
  &lt;li&gt;We fixed 468 issues during our preview and release candidate cycle. Your bug reports were crucial to delivering a high quality release.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With all the work that has gone into JRuby 9000, we’re very proud of what we’ve achieved.&lt;/p&gt;

&lt;h2 id=&quot;installing-jruby&quot;&gt;Installing JRuby&lt;/h2&gt;

&lt;p&gt;JRuby 9000 can be installed in the same ways as previous versions. If you are using Windows, we recommend the &lt;a href=&quot;https://github.com/jruby/jruby/wiki/GettingStarted#microsoft-windows&quot;&gt;Windows Executable installer&lt;/a&gt;. If you are using Linux or Mac OS X, we recommend &lt;a href=&quot;https://github.com/jruby/jruby/wiki/GettingStarted#using-rvm&quot;&gt;using RVM&lt;/a&gt; by running the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rvm install jruby-9.0.0.0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can also install the JRuby 9000 binaries by downloading the latest TAR or ZIP file from the JRuby Downloads page, and putting the bin directory on your PATH. For more information on installing JRuby, see the &lt;a href=&quot;https://github.com/jruby/jruby/wiki/GettingStarted&quot;&gt;Getting Started with JRuby&lt;/a&gt; guide on the Wiki.&lt;/p&gt;

&lt;h2 id=&quot;your-turn&quot;&gt;Your Turn&lt;/h2&gt;

&lt;p&gt;We’re a very friendly community and we welcome all users to our &lt;a href=&quot;http://lists.ruby-lang.org/cgi-bin/mailman/listinfo/jruby&quot;&gt;mailing list&lt;/a&gt;, our IRC channel (#jruby on Freenode), and our &lt;a href=&quot;https://twitter.com/jruby&quot;&gt;team Twitter account&lt;/a&gt;. File bugs against our &lt;a href=&quot;https://github.com/jruby/jruby&quot;&gt;Github project&lt;/a&gt; and check out our &lt;a href=&quot;http://jruby.org/community&quot;&gt;community page&lt;/a&gt; for more information.&lt;/p&gt;

&lt;p&gt;Welcome to the future…&lt;a href=&quot;http://jruby.org/2015/07/22/jruby-9-0-0-0.html&quot;&gt;JRuby 9000&lt;/a&gt; is here!&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>A Truffle/Graal High Performance Backend for JRuby</title>
      <link href="http://blog.jruby.org/2014/01/truffle_graal_high_performance_backend"/>
      <updated>2014-01-06T00:00:00-05:00</updated>
      <id>http://blog.jruby.org/2014/01/truffle_graal_high_performance_backend</id>
      <author>
        <name>Chris Seaton</name>
        <email>chrisgseaton@gmail.com</email>
      </author>
      <content type="html">&lt;p&gt;For the past year &lt;a href=&quot;https://labs.oracle.com&quot;&gt;Oracle Labs&lt;/a&gt; have been working on an implementation of Ruby built upon two new JVM technologies - &lt;a href=&quot;http://openjdk.java.net/projects/graal/&quot;&gt;the Truffle AST interpreter framework and the Graal JVM compiler&lt;/a&gt;. We believe that the new approach will lead to a faster and simpler Ruby implementation.&lt;/p&gt;

&lt;p&gt;We’ve been talking to Charles Nutter and Thomas Enebo for several months and have given them early access to our code. We’ve also been talking to other Ruby implementors such as Alex Gaynor of Topaz, and presenting our results to the JVM language community at the &lt;a href=&quot;http://medianetwork.oracle.com/video/player/2623645003001&quot;&gt;JVM language summit&lt;/a&gt;. Today we are open sourcing our implementation and, with the consent of Charles and Thomas, pushing a patch that begins the integration as an optional backend in JRuby.&lt;/p&gt;

&lt;p&gt;This blog post describes some of the background to this project. The &lt;a href=&quot;http://hg.openjdk.java.net/graal/graal&quot;&gt;original code&lt;/a&gt; is available in the Graal Mercurial repository and the &lt;a href=&quot;https://github.com/jruby/jruby/tree/truffle&quot;&gt;patch to JRuby&lt;/a&gt; is available in a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;truffle&lt;/code&gt; branch in the JRuby Git repository. There is &lt;a href=&quot;https://github.com/jruby/jruby/wiki/Truffle&quot;&gt;documentation of how to use the code and an FAQ&lt;/a&gt; in the JRuby wiki, as well as pointers to more in-depth technical information such as peer-reviewed research publications.&lt;/p&gt;

&lt;h1 id=&quot;what-does-this-new-implementation-do-differently&quot;&gt;What does this new implementation do differently?&lt;/h1&gt;

&lt;p&gt;The new backend is an AST interpreter. We call it the Truffle backend because it’s written using the &lt;a href=&quot;http://openjdk.java.net/projects/graal/&quot;&gt;Truffle framework for writing AST interpreters&lt;/a&gt; from Oracle Labs.&lt;/p&gt;

&lt;p&gt;Truffle is different to other AST interpreters in that it creates ASTs that specialize as they execute. The AST interpretation methods that are currently in JRuby are megamorphic, which means that they must handle all possible types and other dynamic conditions such as branches taken. In Truffle, AST nodes ideally handle a minimal set of conditions, allowing them to be simpler and more statically typed, which can lead to more efficient code. In the less common case that the node’s conditions aren’t met the node is replaced with another node that can handle them.&lt;/p&gt;

&lt;p&gt;AST interpreters are generally thought of as being slow. This is because every operation becomes something such as a virtual method call. MRI 1.8 used a simple AST interpreter, and JRuby still uses an AST interpreter by default for the first run of methods. To improve performance many language implementations convert the AST to bytecode. Python, Ruby 1.9 and above (via YARV) and PHP all do this. Normally the bytecode is still interpreted, but it’s often faster as the data structure is more compactly represented in memory. In the case of many JVM languages like JRuby and other Ruby implementations such as Topaz and Rubinius, this bytecode is eventually compiled into machine code by the JIT compiler.&lt;/p&gt;

&lt;p&gt;Again, Truffle takes a different approach here. When running on JVM with the Graal JIT compiler, Truffle will take all of the methods involved in interpreting your AST and will combine them into a single method. The powerful optimisations that the JVM usually applies to single methods are applied across the combined AST methods and a single machine code function per Ruby method is emitted by Graal.&lt;/p&gt;

&lt;p&gt;For more information about what Truffle and Graal do see the &lt;a href=&quot;https://github.com/jruby/jruby/wiki/Truffle&quot;&gt;JRuby wiki page&lt;/a&gt;, the a recent &lt;a href=&quot;http://www.slideshare.net/ThomasWuerthinger/graal-truffle-ethdec2013&quot;&gt;project summary slide deck&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;is-this-going-to-change-with-how-i-use-jruby-today&quot;&gt;Is this going to change with how I use JRuby today?&lt;/h1&gt;

&lt;p&gt;The Truffle backend, Truffle itself, and Graal are research projects and are certainly not ready for general use today. It is very unlikely that your application or gem will run right now, but if you are interested in the JRuby internals, or the JVM or compiler technology in general we’d encourage you to take a look at what we’re doing. The &lt;a href=&quot;https://github.com/jruby/jruby/wiki/Truffle&quot;&gt;JRuby wiki page&lt;/a&gt; will give you a starting point.&lt;/p&gt;

&lt;p&gt;For the foreseeable future this work is going to live on a separate &lt;a href=&quot;https://github.com/jruby/jruby/tree/truffle&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;truffle&lt;/code&gt; branch&lt;/a&gt; in the main JRuby Git repository. It is possible that this branch will be considered for merging into the master branch before the next major release, JRuby 9000, but this a decision for the wider JRuby community and its leadership.&lt;/p&gt;

&lt;p&gt;We believe that in the further future the Truffle backend could be good enough to become the default backend for JRuby, but again this is a decision for the JRuby community.&lt;/p&gt;

&lt;h1 id=&quot;what-are-we-going-to-do-next&quot;&gt;What are we going to do next?&lt;/h1&gt;

&lt;p&gt;We are going to continue to integrate Truffle into JRuby at the same time as continuing to implement more of the Ruby language. We already have very encouraging results with our initial implementation and with the excellent work already done by the JRuby community we think we can fill in the gaps to be a complete implementation.&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>JRuby Stickers now available</title>
      <link href="http://blog.jruby.org/2014/01/jruby-stickers-now-available"/>
      <updated>2014-01-05T00:00:00-05:00</updated>
      <id>http://blog.jruby.org/2014/01/jruby-stickers-now-available</id>
      <author>
        <name>Hiro Asari</name>
        <email>asari.ruby@gmail.com</email>
      </author>
      <content type="html">&lt;p&gt;JRuby stickers are now ready for shipping!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://db.tt/O6WPg5lO&quot; alt=&quot;JRuby Stickers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you want one, fill out the &lt;a href=&quot;https://docs.google.com/forms/d/1_c80K_XfRmQmRybd3aLvZhWswzFXET9NZvN-uweP47M/viewform&quot;&gt;form&lt;/a&gt;
and send $2 for each sticker via &lt;a href=&quot;https://square.com/cash&quot;&gt;Square Cash&lt;/a&gt;
to community@jruby.org.&lt;/p&gt;

&lt;p&gt;Additionally, we will be handing them out when some of the core members
attend the upcoming conferences.&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>A Last Hurrah For JRuby 1.6</title>
      <link href="http://blog.jruby.org/2012/08/a_last_hurrah_for_jruby_1_6"/>
      <updated>2012-08-27T00:00:00-04:00</updated>
      <id>http://blog.jruby.org/2012/08/a_last_hurrah_for_jruby_1_6</id>
      <author>
        <name>Charles Oliver Nutter</name>
        <email>headius@headius.com</email>
      </author>
      <content type="html">&lt;p&gt;Summer is wrapping up and the JRuby team is busy putting the finishing touches on
JRuby 1.7, our next major release. How major? It has taken us almost 1.5 years to
get to this point. That’s major.&lt;/p&gt;

&lt;p&gt;Of course, we weren’t sitting on our hands that whole time. For about 8 months
after the release of JRuby 1.6 last year, we continued putting out point releases
to catch bugs, improve Ruby 1.9 support, and fix performance and concurrency
issues you faithful JRuby users reported. Even as late as the waning days of 2011,
we were putting out security-fix releases like &lt;a href=&quot;http://jruby.org/2012/05/01/jruby-1-6-7-2&quot;&gt;JRuby 1.6.7.2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But as of today, it has been eight months since a proper JRuby release. That’s too
long.&lt;/p&gt;

&lt;p&gt;JRuby 1.7 has had two preview releases, the most recent a couple weeks ago. And
JRuby 1.7 final is scheduled to come out toward the end of September. There are
already users with 1.7 in production, and we’re confident it’s going to be an
amazing release. But we also recognize that many users are still on JRuby 1.6
and may not be able to migrate for some time.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So, by popular demand, we’re going to release JRuby 1.6.8!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This release will be a bit of an experiment in that the core JRuby team will not
directly contribute to it. We’re looking to community members like you to
backport interesting fixes from JRuby 1.7 (or just come up with new fixes, where
the 1.7 versions require extensive work). We will run our usual slate of release
testing and actually do the legwork of putting out release artifacts, but this
version of JRuby is yours to make what you will!&lt;/p&gt;

&lt;p&gt;We’d like to get JRuby 1.6.8 out soon…like the end of next week. Here’s
how you can help:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If you are running a patched version of JRuby 1.6.x right now, sort out the
patches you need and send us pull requests against the &lt;a href=&quot;https://github.com/jruby/jruby/tree/jruby-1_6&quot;&gt;jruby-1_6 branch on
Github&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you know of fixes from 1.7 you need on your 1.6-based systems, do the
same thing, ideally by using git format-patch so the original committer is
associated with the pull request.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure your changes pass at least the following test runs: “ant
test-extended”, “rake spec:ci_interpreted_18”, and “rake spec:ci_interpreted_19”.
If the patch affects the compiler, you might want to run the “compiled” version
of the “spec:ci” targets.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will then have a look at your pull request, merge it in, and look at a full
JRuby 1.6.8 release in about two weeks.&lt;/p&gt;

&lt;p&gt;If you’d like to try out early builds of JRuby 1.6.8, you can download dev
artifacts from &lt;a href=&quot;http://ci.jruby.org/snapshots/1.6.x/&quot;&gt;JRuby’s CI server&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;JRuby 1.6.8 will really, truly be the last in the 1.6.x line, so this is your
chance to make it a good transition before JRuby 1.7. Now go forth and
backport patches!&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Bridging The Gap With JRuby</title>
      <link href="http://blog.jruby.org/2012/05/bridging-the-gap-with-jruby"/>
      <updated>2012-05-18T00:00:00-04:00</updated>
      <id>http://blog.jruby.org/2012/05/bridging-the-gap-with-jruby</id>
      <author>
        <name>Brian Ploetz</name>
        <email>bploetz@gmail.com</email>
      </author>
      <content type="html">&lt;p&gt;The only things certain in life are death, taxes, and your technology stack will change over time.
While architectural changes are complicated in their own right, the challenges are even greater when
your primary data store is changing to a fundamentally different technology.&lt;/p&gt;

&lt;p&gt;A recent project involved migrating applications from a legacy architecture based on Java/Hibernate/Oracle
to a new architecture based on Ruby/MongoMapper/MongoDB. In order to facilitate the transition from Oracle
to MongoDB, we needed a temporary &lt;a href=&quot;http://en.wikipedia.org/wiki/Extract,_transform,_load&quot;&gt;ETL&lt;/a&gt; solution to
migrate data from Oracle to MongoDB. A new domain model and document structure had been designed and developed
for MongoDB with Ruby/MongoMapper, and there were existing Java/Hibernate entities mapped to Oracle.&lt;/p&gt;

&lt;p&gt;Rather than having to re-map one database or the other in the other persistence technology to facilitate the
ETL process (not &lt;a href=&quot;http://en.wikipedia.org/wiki/Don%27t_repeat_yourself&quot;&gt;DRY&lt;/a&gt;), JRuby allowed the two persistence
technologies to interoperate. By utilizing JRuby’s powerful embedding capabilities, we were able to read data
out of Oracle via Hibernate and write data to MongoDB via MongoMapper.&lt;/p&gt;

&lt;h2 id=&quot;example-domain-model&quot;&gt;Example Domain Model&lt;/h2&gt;

&lt;p&gt;To demonstrate the RDMBS to MongoDB ETL process, consider the ubiquitous blog domain model.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/jruby-etl-model.png&quot; alt=&quot;blog domain model&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A Blog contains many Posts, and a Post contains many Comments. Users create Posts and Comments. The relational model for
this domain model would look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/jruby-etl-erdiagram.png&quot; alt=&quot;blog ER diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The schema is highly normalized. Entities live in their own tables, and are tied together via foreign keys.&lt;/p&gt;

&lt;p&gt;With document databases like MongoDB, you typically want to denormalize data according to your access patterns,
as you can’t rely on joins. In our example blog domain model, storing posts and comments in separate collections
would result in unnecessary querying. Thus, these will become embedded collections within their respective parent
documents, and our resulting Blog MongoDB document would look something like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/2312479.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;posts&lt;/code&gt; is an embedded collection within a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blog&lt;/code&gt; document, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;comments&lt;/code&gt; is an embedded collection within a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post&lt;/code&gt; document. We denormalize the username of the author of posts/comments, and also store the user’s ObjectId,
which will allow us to generate links like&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Posted by &amp;lt;a href=&quot;http://myblog.com/users/4f7d0176f1bb3e1223000005&quot;&amp;gt;bill&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;translators&quot;&gt;Translators&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Translator&lt;/code&gt; classes are Ruby classes which translate Java/Hibernate objects to their Ruby/MongoMapper counterparts,
and contain the logic for dealing with denormalization.&lt;/p&gt;

&lt;p&gt;Let’s look at an example. The Hibernate domain model class for Blog would look something like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/2313375.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Its MongoMapper counterpart would look something like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/2313387.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlogTranslator&lt;/code&gt; class contains the logic to translate Blog entities to Blog documents:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/2625209.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Some things to note:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Translator&lt;/code&gt; is idempotent and knows whether to create or update the document in MongoDB. We store the
RDBMS identifer of the source entity in the MongoDB document to facilitate this logic.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Translators&lt;/code&gt; can call other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Translators&lt;/code&gt; as they traverse the Hibernate model’s object graph. Above we see
that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlogTranslator&lt;/code&gt; calls the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PostTranslator&lt;/code&gt; to translate each associated post.&lt;/li&gt;
  &lt;li&gt;Having each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Translator&lt;/code&gt; be responsible for a single entity (or logical entity) allows you to plug the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Translator&lt;/code&gt; into
your applications to perform real-time incremental ETL as entities are created/updated, as well as chain
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Translators&lt;/code&gt; together to create large scale batch sync ETL processes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;embedding-translators-in-java&quot;&gt;Embedding Translators in Java&lt;/h2&gt;

&lt;p&gt;With the use of JRuby’s &lt;a href=&quot;http://jruby.org/apidocs/org/jruby/embed/ScriptingContainer.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ScriptingContainer&lt;/code&gt;&lt;/a&gt;
class, we can embed our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Translator&lt;/code&gt; objects into our Java applications to facilitate the ETL process. Suppose we
have a command line app which ETLs all Blog entities. It would embed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlogTranslator&lt;/code&gt; and pass each Blog
Hibernate model object to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlogTranslator&lt;/code&gt; object’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;translate&lt;/code&gt; method.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/2625336.js&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;example-etl-application&quot;&gt;Example ETL application&lt;/h2&gt;

&lt;p&gt;A complete RDBMS -&amp;gt; MongoDB ETL application for our blog domain model can be found here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bploetz/jruby-etl&quot;&gt;https://github.com/bploetz/jruby-etl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The repository contains two main directories: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java&lt;/code&gt; directory contains the Hibernate domain model mapped to the relational database, as well as the
example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ETLManager&lt;/code&gt; class which demonstrates JRuby’s embedding capability.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby&lt;/code&gt; directory is a RubyGem containing the MongoMapper domain model mapped to MongoDB, as well as
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Translator&lt;/code&gt; classes.&lt;/p&gt;

&lt;p&gt;To run this project the following are required:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;JDK 1.5 or higher&lt;/li&gt;
  &lt;li&gt;Maven 2.2&lt;/li&gt;
  &lt;li&gt;JRuby (examples below assume JRuby is installed via &lt;a href=&quot;https://rvm.beginrescueend.com/&quot;&gt;RVM&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;http://gembundler.com/&quot;&gt;Bundler&lt;/a&gt; gem installed&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mongodb.org/display/DOCS/Quickstart&quot;&gt;MongoDB&lt;/a&gt; running on the default port at localhost&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For simplicity, this example application uses HSQLDB for the RDBMS, so there is no need to have a separate
RDBMS installed/running. You can obviously change the Spring/Hibernate configuration to use your RDBMS of
choice if you so desire.&lt;/p&gt;

&lt;p&gt;Clone the &lt;a href=&quot;https://github.com/bploetz/jruby-etl&quot;&gt;jruby-etl&lt;/a&gt; git repository and run the following to compile the Java source files and create the distribution:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rvm use jruby
cd java-etl/java
mvn clean package
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;cd to the distribution directory and load the example seed data into the relational database.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd target/jruby-etl-1.0.0-SNAPSHOT-bin/bin
./load-seed-data.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, run the ETL app to translate the seed data from the relational database to MongoDB.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./etl.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The project is configured to log all SQL statements and all MongoDB queries so that you can see the translation happening.&lt;/p&gt;

&lt;p&gt;This ETL application is just one example of how JRuby can help facilitate bridging Java and Ruby based technologies. What
interesting solutions are you building with JRuby?&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Using Trinidad to Run Multiple Apps</title>
      <link href="http://blog.jruby.org/2012/04/two-apps-one-trinidad"/>
      <updated>2012-04-06T00:00:00-04:00</updated>
      <id>http://blog.jruby.org/2012/04/two-apps-one-trinidad</id>
      <author>
        <name>Joe Kutner</name>
        <email>jpkutner@gmail.com</email>
      </author>
      <content type="html">&lt;p&gt;&lt;em&gt;This is part of a series of blog posts leading up to &lt;a href=&quot;http://jrubyconf.com&quot;&gt;JRubyConf 2012&lt;/a&gt;. Joe Kutner is author of &lt;a href=&quot;http://pragprog.com/book/jkdepj/deploying-with-jruby&quot; title=&quot;Deploy with JRuby&quot;&gt;Deploying with JRuby&lt;/a&gt; and an expert on JRuby deployment options. Joe will be attending and speaking at JRubyConf…&lt;a href=&quot;http://www.eventbrite.com/event/2571529514&quot;&gt;register for JRubyConf 2012&lt;/a&gt; today!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;One of the advantages of running Ruby on the JVM is that we can deploy multiple applications to the same webserver.  Using one JRuby webserver means that there is only one process to manage, monitor, start and stop. Your sysadmins will thank you.&lt;/p&gt;

&lt;p&gt;Having mutliple applications on one virtual machine also means we can configure them to share resources, thus reducing the overhead required for a production server.  In this post, we’ll walk through an example of deploying two applications to one Trinidad server.&lt;/p&gt;

&lt;p&gt;Trinidad is a light-weight JRuby web server that runs Rails and Rack applications in an embedded Apache Tomcat container.  Let’s install it by running this command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem install trinidad -v 1.3.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, let’s create a Trinidad home directory.  The examples in this post will use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt/trinidad&lt;/code&gt;, but you can use whatever you’d like.&lt;/p&gt;

&lt;p&gt;Under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt/trinidad&lt;/code&gt; directory, we’ll create two more directories called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thing1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thing2&lt;/code&gt;, which will contain the applications we’re going to run on our single Trinidad server.  In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thing1&lt;/code&gt; directory, create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.ru&lt;/code&gt; file and put this code in it:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/2254164.js&amp;#63;file=thing1_config.ru&quot;&gt;
&lt;!--
require 'rubygems'
require 'sinatra'

get '/' do
  &quot;This is thing one!&quot;
end

run Sinatra::Application
--&gt;
&lt;/script&gt;

&lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thing2&lt;/code&gt; directory, create another &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.ru&lt;/code&gt; file and put this code in it:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/2254164.js&amp;#63;file=thing2_config.ru&quot;&gt;
&lt;!--
require 'rubygems'
require 'sinatra'

get '/' do
  &quot;This is thing two!&quot;
end

run Sinatra::Application
--&gt;
&lt;/script&gt;

&lt;p&gt;Next, we’ll create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt/trinidad/trinidad.yml&lt;/code&gt; file, which will be used to configure our Trinidad server.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/2254164.js?file=trinidad.yml&quot;&gt;
&lt;!--
web_apps:
  default:                                  # use the &quot;/&quot; context
    web_app_dir: '/opt/trinidad/thing1'
  thing2:                                   # use the &quot;/thing2&quot; context
    web_app_dir: '/opt/trinidad/thing2'
--&gt;
&lt;/script&gt;

&lt;p&gt;Our Trinidad home directory should look like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/opt/trinidad/
|-- trinidad.yml/
|-- thing1/
    `-- config.ru/
`-- thing2/
    `-- config.ru/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before we start the server, let’s make sure Sinatra is installed by running this command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem install sinatra
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can run our Trinidad server by executing this command:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/2254164.js?file=run.sh&quot;&gt;
&lt;!--
trinidad &amp;#8208;&amp;#8208;config /opt/trinidad/trinidad.yml
--&gt;
&lt;/script&gt;

&lt;p&gt;As the server starts up, we’ll see that its instatiated two runtimes – one for each of our applications.  We can see each of them by browsing to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:3000&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:3000/thing2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The two applications are completely isolated.  That means if you monkey-patch the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; class in one application, it won’t affect the other application.  If you set a global variable to a constant value in one application, you can set it to a different value in the other application.&lt;/p&gt;

&lt;p&gt;Now let’s move on and really take advantage of what we’ve created!&lt;/p&gt;

&lt;p&gt;Because these applications are running in the same JVM, they can share a Database Connection Pool.  To do this, we’ll need to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trinidad_dbpool_extension&lt;/code&gt;.  Trinidad provides an extension mechanism that allows us to plug-in many kinds of features.They are particularly useful when we need to hook into the embedded Tomcat container, as our database connection pool will.&lt;/p&gt;

&lt;p&gt;To use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trinidad_dbpool_extension&lt;/code&gt;, we’ll need to add an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extensions:&lt;/code&gt; entry to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trinidad.yml&lt;/code&gt; file.  The new entry will contain the configuration for the Database Connection Pool.  The entire file should look like this now:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/2254164.js?file=trinidad2.yml&quot;&gt;
&lt;!--
web_apps:
  default:
    web_app_dir: '/opt/trinidad/thing1'
  thing2:
    web_app_dir: '/opt/trinidad/thing2'
extensions:
  postgresql_dbpool:                                   
    jndi: 'jdbc/trinidad'                           
    username: 'postgres'                              
    password: 'Passw0rd'                              
    url: 'jdbc:postgresql://localhost:5432/trinidad' 
--&gt;
&lt;/script&gt;

&lt;p&gt;The extension creates the database connection pool inside the Tomcat container and gives it a JNDI name.  JNDI is a registry service for resources inside of a JVM.&lt;/p&gt;

&lt;p&gt;You’ll have to use a real database for this to work, but you don’t have to use PostgreSQL.  The extension also supports MySQL, MSSQL, Oracle, and a generic adapter that covers most other JDBC implementations.&lt;/p&gt;

&lt;p&gt;Next, let’s use the pool in our applications.  Change the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thing1/config.ru&lt;/code&gt; file to look like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/2254164.js?file=config.ru&quot;&gt;
&lt;!--
require 'rubygems'
require 'sinatra'
require 'active_record'

get '/' do
  ActiveRecord::Base.establish_connection(
    :adapter =&gt; &quot;jdbcpostgresql&quot;,
    :jndi =&gt; &quot;java:/comp/env/jdbc/trinidad&quot;
  )

  r = ActiveRecord::Base.connection.execute(
    &quot;select count(*) from pg_catalog.pg_tablespace&quot;)

  &quot;Thing one found: #{r.inspect}&quot;
end

run Sinatra::Application
--&gt;
&lt;/script&gt;

&lt;p&gt;First, we’ve loaded the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;active_record&lt;/code&gt; Gem, which we’ll use to interface with our database.  Next, we’ve added two statements to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get&lt;/code&gt; service.  The first statement establishes a connection from the pool by referencing the JNDI resource we definined earlier.  The second line executes a simple query against PostgreSQL’s internal tables.  Finally, we’re returning the result of the query as the service response.&lt;/p&gt;

&lt;p&gt;Next, modify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thing2/config.ru&lt;/code&gt; so it looks similar to the code above, but with “Thing two” in the response.&lt;/p&gt;

&lt;p&gt;Before we can launch these applications, we’ll need to install a few more gems by running these commands:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem install activerecord 
$ gem install trinidad_postgresql_dbpool_extension 
$ gem install activerecord-jdbcpostgresql-adapter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now kill the Trinidad server if it’s still running by pressing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl+C&lt;/code&gt; from it’s console, and start it up again by running this command once more:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ trinidad --config /opt/trinidad/trinidad.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When we point our browser to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:3000&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:3000/thing2&lt;/code&gt; we’ll see something like this (depending on the number of tables in your database):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Thing one found: [{&quot;count&quot; =&amp;gt; 0}]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Both applications are connecting to the database!&lt;/p&gt;

&lt;p&gt;Sharing a database connection pool simplifies our production architecture by eliminating the need for additional layers like pg_pool. Trinidad makes it very easy to configure, but this same kind of setup can be achieved with any JRuby web server – including TorqueBox and Warbler+Tomcat/Jetty/etc.&lt;/p&gt;

&lt;p&gt;If you found this useful, I encourage you to pick up a copy of my book, &lt;a href=&quot;http://pragprog.com/book/jkdepj/deploying-with-jruby&quot; title=&quot;Deploy with JRuby&quot;&gt;Deploying with JRuby&lt;/a&gt;, which has tons of other JRuby examples like this one.&lt;/p&gt;

&lt;p&gt;The complete source for this example can be found on Github at &lt;a href=&quot;https://github.com/jkutner/trinidad-dbpool-example&quot; title=&quot;trinidad-dbpool-example&quot;&gt;trinidad-dbpool-example&lt;/a&gt;.&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Rails 3.2 and Rubygems.org source</title>
      <link href="http://blog.jruby.org/2012/01/rubygems-https"/>
      <updated>2012-01-31T00:00:00-05:00</updated>
      <id>http://blog.jruby.org/2012/01/rubygems-https</id>
      <author>
        <name>Nick Sieger</name>
        <email>nick@nicksieger.com</email>
      </author>
      <content type="html">&lt;p&gt;We announced this on Twitter, but it’s important enough to put here
for posterity.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p&gt;FYI, since 3.2 &lt;a href=&quot;https://t.co/Zxl4M5tA&quot; title=&quot;https://rubygems.org&quot;&gt;rubygems.org&lt;/a&gt; is the default Gemfile source, this means you need to have jruby-openssl installed before &quot;rails new&quot;.&lt;/p&gt;&amp;mdash; JRuby Dev Team (@jruby) &lt;a href=&quot;https://twitter.com/jruby/status/164376150209069056&quot; data-datetime=&quot;2012-01-31T15:55:02+00:00&quot;&gt;January 31, 2012&lt;/a&gt;&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;p&gt;To clarify, the following is put in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; for new Rails 3.2 apps:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;source 'https://rubygems.org'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This means that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jruby-openssl&lt;/code&gt; gem &lt;em&gt;must be installed&lt;/em&gt; before you
can generate a new Rails application.&lt;/p&gt;

&lt;p&gt;An alternative is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails new --skip-bundle&lt;/code&gt;, ensure
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jruby-openssl&lt;/code&gt; is installed, and then run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; inside
your new application.&lt;/p&gt;

&lt;p&gt;We’re looking at options for incorporating more of jruby-openssl into
JRuby proper without importing the export-controlled crypto bits
(which is the reason we don’t currently ship &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jruby-openssl&lt;/code&gt; with
JRuby). If you’re &lt;a href=&quot;https://github.com/jruby/jruby-ossl/&quot;&gt;interested, join us&lt;/a&gt;.&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>JRuby at Square</title>
      <link href="http://blog.jruby.org/2012/01/jruby-at-square"/>
      <updated>2012-01-27T00:00:00-05:00</updated>
      <id>http://blog.jruby.org/2012/01/jruby-at-square</id>
      <author>
        <name>Nick Sieger</name>
        <email>nick@nicksieger.com</email>
      </author>
      <content type="html">&lt;p&gt;At &lt;a href=&quot;http://www.meetup.com/SF-Bay-Area-JRuby-Meetup/events/44244252/&quot;&gt;this month’s past SF JRuby Meetup&lt;/a&gt; Xavier Shay gave a
compelling experience report on Square’s expanding use of JRuby.&lt;/p&gt;

&lt;p&gt;He also announces the open-sourcing of &lt;a href=&quot;https://github.com/square/jetpack&quot;&gt;Jetpack&lt;/a&gt;, Square’s tool for
deploying JRuby applications in their production environment.&lt;/p&gt;

&lt;object width=&quot;640&quot; height=&quot;360&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.youtube.com/v/hMpd4CzR1f8&amp;amp;hl=en_US&amp;amp;feature=player_embedded&amp;amp;version=3&quot; /&gt;&amp;lt;/param&amp;gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot; /&gt;&amp;lt;/param&amp;gt;&lt;param name=&quot;allowScriptAccess&quot; value=&quot;always&quot; /&gt;&amp;lt;/param&amp;gt;&lt;embed src=&quot;http://www.youtube.com/v/hMpd4CzR1f8&amp;amp;hl=en_US&amp;amp;feature=player_embedded&amp;amp;version=3&quot; type=&quot;application/x-shockwave-flash&quot; allowfullscreen=&quot;true&quot; allowscriptaccess=&quot;always&quot; width=&quot;640&quot; height=&quot;360&quot; /&gt;&amp;lt;/embed&amp;gt;&lt;/object&gt;

&lt;p&gt;(Thanks to &lt;a href=&quot;http://marakana.com/forums/ruby/ruby_on_rails/615.html&quot;&gt;Marakana TechTV&lt;/a&gt; for recording and posting the talk!)&lt;/p&gt;

</content>
    </entry>
  
    <entry>
      <title>Monitoring Memory Allocation Per Thread</title>
      <link href="http://blog.jruby.org/2011/12/monitoring-memory_allocation-per-thread"/>
      <updated>2011-12-29T00:00:00-05:00</updated>
      <id>http://blog.jruby.org/2011/12/monitoring-memory_allocation-per-thread</id>
      <author>
        <name>Charles Oliver Nutter</name>
        <email>headius@headius.com</email>
      </author>
      <content type="html">&lt;p&gt;Perhaps the largest benefit of JRuby being on the JVM is the excellent tool ecosystem.
There’s an enormous collections of debuggers, profilers, and general monitoring tools
available for JVM that work great with JRuby. Even better, a surprising number of these
tools are built into each JVM.&lt;/p&gt;

&lt;p&gt;One of these tool sets is the &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/management/package-summary.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.lang.management&lt;/code&gt;&lt;/a&gt;
package. Here, you’ll find a number of &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/tech/javamanagement-140525.html&quot;&gt;JMX&lt;/a&gt; beans for monitoring the status and health
of the JVM. Some of the information presented by these beans is standard, like &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/management/ManagementFactory.html#getMemoryPoolMXBeans()&quot;&gt;lists
of memory pools&lt;/a&gt;
(heaps) or the &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/management/OperatingSystemMXBean.html#getAvailableProcessors()&quot;&gt;number of available processors&lt;/a&gt;
on the current system. But each JVM may also expose additional information.&lt;/p&gt;

&lt;p&gt;On OpenJDK, starting with 6u25, the built-in &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/management/ThreadMXBean.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ThreadMXBean&lt;/code&gt;&lt;/a&gt;
exposes an additional operation: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getThreadAllocatedBytes&lt;/code&gt;. How can JRubyists take
advantage of it?&lt;/p&gt;

&lt;h2 id=&quot;monitoring-thread-allocation&quot;&gt;Monitoring Thread Allocation&lt;/h2&gt;

&lt;p&gt;Of course, via JRuby’s Java integration, we can easily call any of the management beans’
operations, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getThreadAllocatedBytes&lt;/code&gt; is no different.&lt;/p&gt;

&lt;p&gt;We start by loading the ‘java’ and ‘jruby’ libraries, to access Java classes and some
normally-hidden JRuby features.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require 'java'
require 'jruby'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We get access to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ThreadMXBean&lt;/code&gt; via the &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/management/ManagementFactory.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ManagementFactory&lt;/code&gt;&lt;/a&gt; 
class.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;thread_bean = java.lang.management.ManagementFactory.thread_mx_bean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, we will create a thread that endlessly creates a new string, and get references
to that thread’s and the main thread’s native &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.lang.Thread&lt;/code&gt; object.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;t1 = Thread.new do
  a = nil
  loop do
    a = 'foo'
  end
end
t1_thread = JRuby.reference(t1).native_thread

main = Thread.current
main_thread = JRuby.reference(main).native_thread
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that we’ve got a thread busily allocating data, we set up a loop that prints out
both threads’ allocated bytes once every second. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getThreadAllocatedBytes&lt;/code&gt;
method takes an array of thread IDs and returns an array of byte counts, both as
long[].&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;loop do
  sleep 1
  t1_alloc = thread_bean.get_thread_allocated_bytes([t1_thread.id].to_java(:long))[0]
  main_alloc = thread_bean.get_thread_allocated_bytes([main_thread.id].to_java(:long))[0]
  puts &quot;main allocated: #{main_alloc}&quot;
  puts &quot;t1 allocated: #{t1_alloc}&quot;
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(Note the bit of Java integration array-munging; par for the course going from Ruby’s
heterogeneous Array to Java’s homogeneous arrays.)&lt;/p&gt;

&lt;p&gt;And that’s it! Here’s the output on my system for five iterations of the loop:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;main allocated: 11343752
t1 allocated: 378806608
main allocated: 11359632
t1 allocated: 767226768
main allocated: 11361624
t1 allocated: 1156928944
main allocated: 11363616
t1 allocated: 1547160976
main allocated: 11365608
t1 allocated: 1930237360
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ve gisted the full script here: &lt;a href=&quot;https://gist.github.com/1533906&quot;&gt;Monitoring Thread Allocation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;your-turn&quot;&gt;Your Turn&lt;/h2&gt;

&lt;p&gt;This is just one of many fun (and useful!) ways you can monitor the JVM using JRuby.
Poke around in &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/management/ManagementFactory.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ManagementFactory&lt;/code&gt;&lt;/a&gt;
and see what else you can find!&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Getting Started with JRuby and Java 7</title>
      <link href="http://blog.jruby.org/2011/12/getting_started_with_jruby_and_java_7"/>
      <updated>2011-12-19T00:00:00-05:00</updated>
      <id>http://blog.jruby.org/2011/12/getting_started_with_jruby_and_java_7</id>
      <author>
        <name>Charles Oliver Nutter</name>
        <email>headius@headius.com</email>
      </author>
      <content type="html">&lt;p&gt;Unless you’ve been living under a rock, you’ve probably heard about the new hotness for JRuby:
Java 7’s support for dynamic languages. You may also have heard about the huge perf gains
that JRuby’s seeing when running on Java 7. How can you try it yourself?&lt;/p&gt;

&lt;h2 id=&quot;get-java-7&quot;&gt;Get Java 7&lt;/h2&gt;

&lt;p&gt;The reference implementation for Java is &lt;a href=&quot;http://openjdk.java.net/&quot;&gt;OpenJDK&lt;/a&gt;, and
&lt;a href=&quot;http://openjdk.java.net/projects/jdk7/&quot;&gt;OpenJDK 7&lt;/a&gt; has been out for almost six months now.
The current version is 7u2 (‘u’ stands for ‘update’), and includes a
&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/2col/7u2bugfixes-1394661.html&quot;&gt;number of improvements&lt;/a&gt;
over the GA (‘General Availability’) release.&lt;/p&gt;

&lt;p&gt;Most platforms have easy access to OpenJDK builds. I’ll summarize the steps here.&lt;/p&gt;

&lt;h3 id=&quot;linux-windows-and-solaris&quot;&gt;Linux, Windows, and Solaris&lt;/h3&gt;

&lt;p&gt;Oracle provides binary downloads for Windows, Linux, and Solaris on its site. The &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;JavaSE
Downloads&lt;/a&gt; page links to
both JDK and JRE download pages. You’ll probably want the JDK, since it includes other
JVM-related dev tools, but the JRE will work too. Download, install, and you’re ready.&lt;/p&gt;

&lt;p&gt;Additionally, package managers for Linux and Solaris will likely soon have OpenJDK 7u2
packages available, if they don’t already.&lt;/p&gt;

&lt;h3 id=&quot;os-x&quot;&gt;OS X&lt;/h3&gt;

&lt;p&gt;The official &lt;a href=&quot;http://jdk7.java.net/macportpreview/&quot;&gt;preview of OpenJDK for OS X&lt;/a&gt; lags behind,
but you can get the current builds from the
&lt;a href=&quot;http://code.google.com/p/openjdk-osx-build/&quot;&gt;openjdk-osx-build&lt;/a&gt; project. The build
you want is currently labeled “OpenJDK-OSX-1.7-x64-u2-b21”, but any build labeled “1.7”
and “u2” in the future will get what you need. The .dmg provides either a self-contained
JDK for you to drop onto your system or a .pkg installer that does it for you.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update&lt;/em&gt;: Henri Gomez, the primary guy behind openjdk-osx-build, has set up a page specifically
for the update builds. Grab the JDK or JRE from his
&lt;a href=&quot;http://code.google.com/p/openjdk-osx-build/wiki/OpenJDK7JDK7UOSX&quot;&gt;OpenJDK7JDK7UOSX&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update 2&lt;/em&gt;: Oracle now has a supported build of &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk-7u4-downloads-1591156.html&quot;&gt;Java 7 update 4 for OS X&lt;/a&gt;, so you can get it
from them! It only supports Lion, though, so if you’re on Snow Leopard you will still need
to use a build from Henri or build it yourself.&lt;/p&gt;

&lt;h3 id=&quot;bsd&quot;&gt;*BSD&lt;/h3&gt;

&lt;p&gt;The OS X work is based off the “bsd-port” branch of OpenJDK. There are links to Java 7 package
information for FreeBSD, NetBSD, DragonFly BSD, and OpenBSD on the
&lt;a href=&quot;https://wikis.oracle.com/display/OpenJDK/BSDPort&quot;&gt;BSD Port wiki&lt;/a&gt;. These may not be updated to
7u2 yet.&lt;/p&gt;

&lt;h2 id=&quot;why-update-2&quot;&gt;Why Update 2?&lt;/h2&gt;

&lt;p&gt;We haven’t previously made a lot of noise about Java 7 and JRuby, nor assembled a
blog post/tutorial like this, primarily because Java 7 GA was missing key optimizations
in the invokedynamic subsystem. JRuby 1.7 will make heavy use of invokedynamic, and if we had
released it before those optimizations were in place, it would have given people a bad
impression of the power of invokedynamic.&lt;/p&gt;

&lt;p&gt;Update 2 now has a small set of optimizations that make a very large difference. If you intend
to start playing with JRuby 1.7 builds, we strongly recommend you use OpenJDK 7u2 or higher.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update&lt;/em&gt;: Your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jruby -v&lt;/code&gt; output should look something like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jruby 1.7.0.dev (ruby-1.8.7-p352) (2011-12-19 f404f75) (OpenJDK 64-Bit Server VM 1.7.0-u2-b21) [darwin-amd64-java]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The important bit is that “u2” appear somewhere in that line.&lt;/p&gt;

&lt;h2 id=&quot;getting-jruby&quot;&gt;Getting JRuby&lt;/h2&gt;

&lt;p&gt;Of course getting JRuby is always pretty easy.&lt;/p&gt;

&lt;h3 id=&quot;jruby-16x-current-release&quot;&gt;JRuby 1.6.x (current release)&lt;/h3&gt;

&lt;p&gt;The current release of JRuby is always available on the &lt;a href=&quot;http://jruby.org&quot;&gt;JRuby homepage&lt;/a&gt;.
Here, you’ll find tarballs, zipfiles, Windows installers, and JRuby in other forms. Download,
unpack, add bin/ to PATH, and you’re ready.&lt;/p&gt;

&lt;p&gt;If you want to get the leading edge of the JRuby 1.6 line, including fixes that have not yet
been released, you can download a nightly snapshot from JRuby’s
&lt;a href=&quot;http://ci.jruby.org/snapshots/release&quot;&gt;release snapshots page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also install JRuby through RVM or rbenv, using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rvm install jruby&lt;/code&gt; or
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbenv install jruby-1.6.5&lt;/code&gt;, respectively. This is our recommended procedure for folks
already using RVM or rbenv. It’s also possible to build/install JRuby 1.6.x snapshots using
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rvm install --branch jruby-1\_6 jruby-head&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Windows users may be interested in &lt;a href=&quot;https://github.com/vertiginous/pik&quot;&gt;pik&lt;/a&gt;, an RVM-like
tool for managing Ruby installations. It supports JRuby, naturally.&lt;/p&gt;

&lt;p&gt;There are also JRuby packages for most major Linux and BSD variants. They’re not always
up-to-date, however.&lt;/p&gt;

&lt;p&gt;Finally, you can clone JRuby from the &lt;a href=&quot;http://github.com/jruby/jruby&quot;&gt;JRuby github repository&lt;/a&gt;
and build the jruby-1_6 branch.&lt;/p&gt;

&lt;h3 id=&quot;jruby-17x-in-development&quot;&gt;JRuby 1.7.x (in development)&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Update:&lt;/em&gt; &lt;a href=&quot;http://www.jruby.org/2012/05/21/jruby-1-7-0-preview1&quot;&gt;JRuby 1.7.0.preview1&lt;/a&gt; has been released!
We are very interested in bug reports for the new invokedynamic support, and wanted to get
this preview out for people to test. There will be issues, don’t think for a moment there
will not…but that’s what previews and release candidates are for. Help us make 1.7.0
awesome!&lt;/p&gt;

&lt;p&gt;JRuby 1.7 is not out yet…we had been waiting for OpenJDK 7u2 to drop before starting
our finalization process. But we’re looking for folks to start playing with it now. Until we
release JRuby 1.7, you can get it a few different ways.&lt;/p&gt;

&lt;p&gt;Simplest is probably to grab a snapshot from the JRuby’s
&lt;a href=&quot;http://ci.jruby.org/snapshots/master&quot;&gt;master snapshots page&lt;/a&gt;. You’ll find the usual complement
of packages and installers there.&lt;/p&gt;

&lt;p&gt;RVM can install JRuby master using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rvm install jruby-head&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And of course, you can clone from &lt;a href=&quot;http://github.com/jruby/jruby&quot;&gt;Github&lt;/a&gt; and build the master
branch yourself, by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ant&lt;/code&gt;. JRuby runs fine from the working copy.&lt;/p&gt;

&lt;h2 id=&quot;use-the-right-java-version&quot;&gt;Use the Right Java Version&lt;/h2&gt;

&lt;p&gt;Ironically, the most complicated part of this process is making sure your system is set up
correctly to use Java 7 instead of some other version. The simple answer is to hardcode the
Java 7 bin/ dir in your shell’s PATH, but that’s both inelegant and incompatible with some
systems’ preferred mechanisms. Here’s a short survey of more elegant ways to easily swap Java
versions.&lt;/p&gt;

&lt;h3 id=&quot;linux&quot;&gt;Linux&lt;/h3&gt;

&lt;p&gt;As with most things, Linux variants don’t agree on how to manage multiple alternative versions
of a given package. Below I summarize the “blessed” way to do it on various Linux flavors.&lt;/p&gt;

&lt;p&gt;Alternatively, you can rig up a trivial shell function or script that, when run, rewrites your
environment to point at the target Java installation. See the “pickjdk” script for OS X below.&lt;/p&gt;

&lt;h4 id=&quot;debian-variants-debian-ubuntu-etc&quot;&gt;Debian variants (Debian, Ubuntu, etc)&lt;/h4&gt;

&lt;p&gt;On Debian, your command of choice will be update-java-alternatives. This resets a set of
global symlinks to point at the Java installation you prefer. It’s not the most elegant way,
since the change is made globally, but it is the blessed way.&lt;/p&gt;

&lt;h4 id=&quot;redhat-variants&quot;&gt;RedHat variants&lt;/h4&gt;

&lt;p&gt;RedHat has a similar command called “alternatives”, under which there’s a “java” namespace.
the JBoss 5 docs have a nice page on
&lt;a href=&quot;http://docs.redhat.com/docs/en-US/JBoss_Enterprise_Web_Platform/5/html/Installation_Guide/sect-use_alternatives_to_set_default_JDK.html&quot;&gt;setting the default JDK on RHEL&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;gentoo-and-other-linux-variants&quot;&gt;Gentoo and other Linux variants&lt;/h4&gt;

&lt;p&gt;I have so far been unable to find a way to easily manage multiple installed Java versions on
Gentoo. Feel free to submit suggestions in the comments.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update&lt;/em&gt;: Gentoo’s mechanism is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java-config&lt;/code&gt; command. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java-config -L&lt;/code&gt; lists all
installed runtimes, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java-config -set X&lt;/code&gt; sets the default to runtime X.&lt;/p&gt;

&lt;h3 id=&quot;windows&quot;&gt;Windows&lt;/h3&gt;

&lt;p&gt;On Windows, your best best is generally to put the preferred Java version’s bin/ dir in PATH.
If you have other suggestions, feel free to comment.&lt;/p&gt;

&lt;h3 id=&quot;os-x-1&quot;&gt;OS X&lt;/h3&gt;

&lt;p&gt;Your best option will be to use the oft-tweaked “pickjdk” script, which scans installed JDK
versions and presents a menu. Selecting a version rewrites your environment to point at that
version. I prefer &lt;a href=&quot;https://gist.github.com/1234935&quot;&gt;my pickjdk variant&lt;/a&gt;, since it allows specifying an install number directly
without going through the menu.&lt;/p&gt;

&lt;p&gt;An alternative is to configure your environment manually. Java installations are located under
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Library/Java/JavaVirtualMachines&lt;/code&gt;; set JAVA_HOME to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Library/Java/JavaVirtualMachines/1.7.0u.jdk/Contents/Home&lt;/code&gt;and prepend $JAVA_HOME/bin to
your PATH. You’re ready to go.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update&lt;/em&gt;: There’s an easy way to find available JAVA_HOMEs: the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java_home&lt;/code&gt; command.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/libexec/java_home&lt;/code&gt; will return the path to the default JVM (from Java Preferences).
You can also specify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-v 1.7&lt;/code&gt; for the first Java 7 (1.7) install, or pass &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-V&lt;/code&gt; to
list all available JVMs.&lt;/p&gt;

&lt;p&gt;You can also open up the Java Preferences utility (located in /Applications/Utilities)
and drag your preferred Java version to the top. This is a &lt;em&gt;global&lt;/em&gt; change, and will affect
any programs that use the default Java version. Because the GUI parts of the OS X Java 7
preview are still in development, THIS IS NOT RECOMMENDED.&lt;/p&gt;

&lt;h3 id=&quot;other-oses&quot;&gt;Other OSes&lt;/h3&gt;

&lt;p&gt;I don’t know the proper mechanism for managing Java installations on the other BSDs
or on Solaris. Feel free to comment.&lt;/p&gt;

&lt;h2 id=&quot;try-it-out&quot;&gt;Try It Out!&lt;/h2&gt;

&lt;p&gt;Once you’ve got JRuby installed and in PATH (via whatever mechanism) and Java 7 installed
and in PATH (via whatever mechanism), you’re ready to test it out! Start up &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jirb&lt;/code&gt;,
launch your favorite JRuby-based app, or just run some benchmarks.&lt;/p&gt;

&lt;p&gt;If you’re especially interested in performance, try out
&lt;a href=&quot;https://raw.github.com/jruby/jruby/master/bench/bench_red_black.rb&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bench/bench_red_black.rb&lt;/code&gt;&lt;/a&gt;
from JRuby’s benchmark suite. It’s a pure-Ruby implementation and benchmark of a red/black
tree, and a good representation of the kind of performance improvements you should see
from JRuby on Java 7. There’s plenty of other benchmarks in our suite and in the wild…
play around and let us know how it goes.&lt;/p&gt;

&lt;h2 id=&quot;what-to-expect&quot;&gt;What to Expect&lt;/h2&gt;

&lt;p&gt;Java 7 brings a lot of performance updates, even without invokedynamic. If you’re using JRuby
1.6.x, you should see an immediate performance improvement moving from Java 6 to Java 7. I
have heard reports of anywhere from 10-30% faster applications.&lt;/p&gt;

&lt;p&gt;If you’re trying out JRuby master (1.7), you should see even more significant improvements.
JRuby 1.7’s use of invokedynamic means that Ruby code runs faster, optimizes better, and uses
fewer resources. In fact, if you &lt;em&gt;don’t&lt;/em&gt; see better performance with JRuby 1.7 versus JRuby
1.6 on Java 7, please report an issue at &lt;a href=&quot;http://bugs.jruby.org&quot;&gt;JRuby’s bug tracker&lt;/a&gt;. You’ve
probably found a flaw in our compiler…a flaw we’ll want to fix before release.&lt;/p&gt;

&lt;p&gt;As a bit of a teaser, here’s &lt;a href=&quot;https://gist.github.com/1493911&quot;&gt;my numbers running the red/black tree benchmark&lt;/a&gt;
from above (the numbers are time in seconds). Compared to JRuby on Java 6, JRuby
on Java 7 &lt;em&gt;without&lt;/em&gt; invokedynamic is around 25% faster, and JRuby with invokedynamic is nearly
&lt;em&gt;3 times&lt;/em&gt; faster.&lt;/p&gt;

&lt;p&gt;It’s also worth mentioning that invokedynamic isn’t “done”. There’s a new optimizer planned for
Java 7u4 and my OpenJDK friends tell me there are many opportunities to increase performance.
JRuby on Java 7 will just keep getting faster.&lt;/p&gt;

&lt;p&gt;JRuby has room to grow as well. We’re using invokedynamic heavily for the upcoming 1.7 release,
but there’s many places yet to be adapted. The performance you see today is not the end of the
story…there’s a lot more we can do.&lt;/p&gt;

&lt;h2 id=&quot;your-turn&quot;&gt;Your Turn&lt;/h2&gt;

&lt;p&gt;That’s about it for this tutorial. Hopefully you’ll be up and running on JRuby with Java 7
very quickly. If you have any trouble, please comment…we’ll try update this article with
fixes and suggestions. And I repeat my call for feedback on JRuby master + Java 7…this is
the future of JRuby, and it could be the future of high-performance Ruby. Let’s work together
to make it awesome!&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>JRuby CI: Keeping it Real</title>
      <link href="http://blog.jruby.org/2011/12/jruby-ci-keeping-it-real"/>
      <updated>2011-12-16T00:00:00-05:00</updated>
      <id>http://blog.jruby.org/2011/12/jruby-ci-keeping-it-real</id>
      <author>
        <name>Charles Oliver Nutter</name>
        <email>headius@headius.com</email>
      </author>
      <content type="html">&lt;p&gt;Building a Ruby implementation is a long and challenging project. There’s thousands of
tests you need to pass, tens of thousands of libraries you need to run, and lots of
edge cases you need to discover and fix over time. Perhaps even more challenging is
keeping your Ruby implementation working from release to release, commit to commit.
Continuous integration is an absolute necessity.&lt;/p&gt;

&lt;p&gt;JRuby has had a CI server for at least the past five years, running hand-rolled
options at first, and later to &lt;a href=&quot;http://jenkins-ci.org/&quot;&gt;Jenkins&lt;/a&gt; (nee Hudson) where we will stay for the
foreseeable future. This post will help you understand how much effort we put into
remaining compatible and stable over time, and how you can track JRuby’s dev process
from a CI perspective.&lt;/p&gt;

&lt;h2 id=&quot;the-server&quot;&gt;The Server&lt;/h2&gt;

&lt;p&gt;As mentioned above, we run Jenkins for our CI server. The &lt;a href=&quot;http://ci.jruby.org&quot;&gt;ci.jruby.org&lt;/a&gt;
machine runs on EC2 on a modest-sized instance funded by &lt;a href=&quot;http://engineyard.com&quot;&gt;Engine Yard&lt;/a&gt;. There are dozens
of builds running on that machine, and it’s busy almost 24 hours a day.&lt;/p&gt;

&lt;p&gt;There are several dimensions across which we test JRuby:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“master” versus “release” - Currently 1.7 dev versus 1.6.x, the master branch and jruby-1_6 branch.&lt;/li&gt;
  &lt;li&gt;basic versus extended versus “all” tests - The “test” builds are doing our normal “test” target,
which runs quickly and includes a smaller subset of the full suite. These take about 3-5 minutes.
The “test-all” builds run an extended suite of tests across many combinations of JRuby
settings, and take anywhere from 30 to 60 minutes (run nightly).&lt;/li&gt;
  &lt;li&gt;JVM vendor and version - We run our basic suite across several JVMs and try to keep them
green…but it’s a challenge.&lt;/li&gt;
  &lt;li&gt;RubySpecs - We run the full RubySpec suite across several combinations of JRuby settings.&lt;/li&gt;
  &lt;li&gt;Domain-specific tests - We ensure the jruby-complete.jar works properly, jruby libraries like
jruby-rack and jruby-openssl pass their tests, and various rails releases pass their tests as
well. These aren’t always kept green, since they depend on external repos and changes, but we
try to periodically tidy them up.&lt;/li&gt;
  &lt;li&gt;Platform-specific tests - We also run our test suite on Windows, and have several test runs
for Ruboto, the JRuby-on-Android framework.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s probably safe to say JRuby runs more tests in more combinations than any other Ruby
implementation, including MRI itself. What do the tests include?&lt;/p&gt;

&lt;h2 id=&quot;the-suite&quot;&gt;The Suite&lt;/h2&gt;

&lt;p&gt;JRuby’s test suite obviously includes our own JRuby-specific tests, but over time it has grown
to include several other suites.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JRuby’s tests and specs - These are largely testing JRuby-specific features like Java
integration or our Java-facing embedding APIs. We also have some tests for JRuby-specific
enhancements to core Ruby functionality, like URL support in File and Dir methods.&lt;/li&gt;
  &lt;li&gt;Legacy runit and minirunit tests - Inherited from older suites in MRI, this suite has slowly
been shrinking over time.&lt;/li&gt;
  &lt;li&gt;MRI’s test suite - In order to keep up with MRI’s feature changes, we also run MRI’s suite
in various forms. Most recently, we started running MRI 1.9.3’s test suite unmodified, using
the new “excludes” feature in minitest.&lt;/li&gt;
  &lt;li&gt;Rubicon - Rubicon was a suite of tests written originally to support the “Programming Ruby”
book from PragProg. We have always run it, and over time tidied it up and just use our local
copy. This too has shrunk over time, as we move more tests into RubySpec.&lt;/li&gt;
  &lt;li&gt;The ruby_test suite - This is a suite of tests created by Daniel Berger to support his
“facets” project. We run them just because.&lt;/li&gt;
  &lt;li&gt;Our “main” Java-based suite - A set of JUnit test for JRuby’s Java APIs.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://rubyspec.org&quot;&gt;RubySpec&lt;/a&gt; - And of course, we run RubySpec for both 1.8 and 1.9 modes. If we encounter bugs
or missing tests, we almost always add to RubySpec, rather than to any of the other suites.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All six of these test groups are run as part of the “test-extended” and “test-all” targets,
adding up to literally millions of assertions.&lt;/p&gt;

&lt;h2 id=&quot;the-snapshots&quot;&gt;The Snapshots&lt;/h2&gt;

&lt;p&gt;In order to aid people testing JRuby, and to give people easier access to the latest features
on master and fixes on our release branches, we publish nightly snapshots to &lt;a href=&quot;http://ci.jruby.org/snapshots&quot;&gt;ci.jruby.org/snapshots&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here you will find &lt;a href=&quot;http://ci.jruby.org/snapshots/1.7.x&quot;&gt;1.7.x&lt;/a&gt; and &lt;a href=&quot;http://ci.jruby.org/snapshots/1.6.x&quot;&gt;1.6.x&lt;/a&gt; builds, or if you
prefer to use our rolling development aliases,
&lt;a href=&quot;http://ci.jruby.org/snapshots/master&quot;&gt;master&lt;/a&gt; and &lt;a href=&quot;http://ci.jruby.org/snapshots/release&quot;&gt;release&lt;/a&gt; builds.&lt;/p&gt;

&lt;h2 id=&quot;your-turn&quot;&gt;Your Turn&lt;/h2&gt;

&lt;p&gt;There’s a lot to track on our CI server, and we’d love your help in keeping builds green or
fixing builds that are red. We’re also looking to add other key libraries to our CI server,
to help ensure we’re maintaining a high level of compatibility. If you think you can help,
post a message to the JRuby dev list, or ping &lt;a href=&quot;http://twitter.com/jruby&quot;&gt;@jruby&lt;/a&gt; on Twitter!&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Gracious Eloise Interview</title>
      <link href="http://blog.jruby.org/2011/11/gracious-eloise-interview"/>
      <updated>2011-11-20T00:00:00-05:00</updated>
      <id>http://blog.jruby.org/2011/11/gracious-eloise-interview</id>
      <author>
        <name>Chris White</name>
        <email>cwgem@jruby.org</email>
      </author>
      <content type="html">&lt;p&gt;It’s always interesting to see how JRuby is being utilized by our users. Sometimes it’s ways we expect, other times the results are unexpected. Rebecca Miller-Webster (&lt;a href=&quot;https://twitter.com/#!/rmillerwebster&quot;&gt;@rmillerwebster&lt;/a&gt;), Head of Technology at &lt;a href=&quot;http://www.graciouseloise.com/&quot;&gt;Gracious Eloise&lt;/a&gt; (&lt;a href=&quot;https://twitter.com/#!/graciouseloise&quot;&gt;@graciouseloise&lt;/a&gt;), posted a blog entry titled &lt;a href=&quot;http://www.rebeccamiller-webster.com/2011/11/the-power-of-jruby/&quot;&gt;The Power of JRuby&lt;/a&gt; showing a rather interesting use of JRuby. Wanting to know more about how JRuby fit into Gracious Eloise’s architecture, I conducted an interview so that users could see what kind of exciting things people are doing with JRuby!&lt;/p&gt;

&lt;h2 id=&quot;to-start-off-what-is-gracious-eloise-and-what-problem-does-it-look-to-solve&quot;&gt;To start off, what is Gracious Eloise and what problem does it look to solve?&lt;/h2&gt;

&lt;p&gt;Gracious Eloise is making handwriting digital and handwritten notes as easy as email. We are creating a platform that allows business and individuals to write handwritten notes from their computer – the notes are either printed, stamped, and mailed or emailed (coming soon!)&lt;/p&gt;

&lt;p&gt;Our founder, Eloise Bune, came up with the idea when she had to write 300 thank you notes after her wedding.  In the process of building the algorithm and talking with investors, she realized that companies in many sectors, such as retail, non-profits, car dealerships, elected officials, and PR, currently have handwritten note programs that they are unable to scale or ensure quality and corporate standards.  That’s where Gracious Eloise comes in.&lt;/p&gt;

&lt;h2 id=&quot;when-did-you-first-find-out-about-jruby&quot;&gt;When did you first find out about JRuby?&lt;/h2&gt;

&lt;p&gt;I had heard rumblings of JRuby for a while – a friend who is a Ruby and Java/Hadoop guy kept suggesting it to me for Gracious Eloise.  Our handwriting replication algorithm is written in Mathematica, and I was struggling to build a Java web service that would allow our web app to connect to it.&lt;/p&gt;

&lt;h2 id=&quot;at-what-point-did-you-decide-to-use-jruby-and-was-it-a-tough-decision&quot;&gt;At what point did you decide to use JRuby, and was it a tough decision?&lt;/h2&gt;

&lt;p&gt;After struggling to get a Spring MVC web service to just return JSON without a view, I gave myself 2 hours to try to do it in JRuby.  It was done and working in 30 minutes.  Not a tough decision at all!&lt;/p&gt;

&lt;h2 id=&quot;how-does-jruby-fit-in-to-your-current-architecture&quot;&gt;How does JRuby fit in to your current architecture?&lt;/h2&gt;

&lt;p&gt;JRuby is the glue that connects everything together.  It connects our handwriting replication code (with a light Java wrapper around it) to our MRI Ruby on Rails web app via Resque jobs.  Ultimately, we will get rid of the Java code altogether and move that into JRuby as well as rewriting some or all of the handwriting replication algorithm using JRuby.  Because we can use Java’s image and graphics libraries, JRuby is a huge win for us in terms of the algorithm itself.&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-architecture-like-that-keeps-everything-running&quot;&gt;What is the architecture like that keeps everything running?&lt;/h2&gt;

&lt;p&gt;We have Mathematica, Java, and JRuby running together in EC2 to do algorithm related processing. Our web app is Rails 3 with Backbone.js running on Heroku.  Pusher allows us to send messages about the status of processing to the web app.  Handwriting data is stored in MySQL (RDS), while customer and other web app related data is in Postgres.&lt;/p&gt;

&lt;h2 id=&quot;what-do-you-consider-to-be-jrubys-strengths-and-weaknesses&quot;&gt;What do you consider to be JRuby’s strengths and weaknesses?&lt;/h2&gt;

&lt;p&gt;As I said in a recent blog post, I think the biggest strength of JRuby is that it opens you up to using any Java library out there.  Used in conjunction with Resque and MRI or REE Ruby, you can also use any C library out there.  Basically, JRuby hands you most of the world of code on a platter.&lt;/p&gt;

&lt;p&gt;As for weaknesses, I think it’s biggest weaknesses are Java’s biggest weaknesses.   And I’m mostly talking about Java’s insane love of memory. :)  Obviously, using the JVM and having access to Java libraries have huge advantages, so as with all technology choices, it’s a trade off.  But, again, you could always have code that is a memory-suck in Java moved to C and connect with other JRuby code in Resque.  JRuby allows you to choose the best tool for each job at hand and that, to me, is huge.&lt;/p&gt;

&lt;h2 id=&quot;you-mentioned-that-you-were-looking-for-a-jruby-developer-what-kind-of-work-would-be-involved&quot;&gt;You mentioned that you were looking for a JRuby developer. What kind of work would be involved?&lt;/h2&gt;

&lt;p&gt;The main project our &lt;a href=&quot;http://careers.stackoverflow.com/jobs/14749/ruby-jruby-developer-gracious-eloise&quot;&gt;JRuby Developer&lt;/a&gt; would tackle would be creating an app for processing handwriting samples, likely a combination desktop and web app.  Currently, the process of getting someone’s handwriting is a huge pain and requires a review process that is terrible to do in Mathematica.  We have some code for this here and there, but it would really be building something from scratch.  Beyond that, the job would involve keeping the glue between the algorithm and the web app working and improving the speed and efficiency.  Also, helping our algorithm engineers move code out of Mathematica.&lt;/p&gt;

&lt;p&gt;We are super small (i.e. I’m the only full-time developer), so if someone wanted to work on the web app side or the algorithm side as well that is on the table.  There’s also work to do with printer and email provider integration as well as CRM integration.&lt;/p&gt;

&lt;h2 id=&quot;thank-you-for-taking-the-time-for-this-interview-do-you-have-any-closing-words-for-our-readers&quot;&gt;Thank you for taking the time for this interview! Do you have any closing words for our readers?&lt;/h2&gt;

&lt;p&gt;JRuby rocks my world!&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>JRuby Community Improvements</title>
      <link href="http://blog.jruby.org/2011/11/jrubycommunity"/>
      <updated>2011-11-17T00:00:00-05:00</updated>
      <id>http://blog.jruby.org/2011/11/jrubycommunity</id>
      <author>
        <name>Chris White</name>
        <email>cwprogram@live.com</email>
      </author>
      <content type="html">&lt;p&gt;JRuby community guy Chris White (&lt;a href=&quot;https://twitter.com/#!/cwgem&quot;&gt;@cwgem&lt;/a&gt;) here. First off as I’ll be offering topics you can contact me about, here’s the best ways to do so:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;IRC: cwgem  @ freenode&lt;/li&gt;
  &lt;li&gt;Mail: cwprogram at live dot com&lt;/li&gt;
  &lt;li&gt;Twitter: &lt;a href=&quot;https://twitter.com/#!/cwgem&quot;&gt;@cwgem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As of late I’ve been getting more involved in helping with the JRuby community, and finding out the best ways to reach out to new and existing users. Knowing who your community is helps to understand what needs should be filled, and what possible pain points are. That’s why I’ve made a few changes that I’d like to talk about to hopefully get you, the community, involved with JRuby better.&lt;/p&gt;

&lt;h2 id=&quot;twitter-accounts&quot;&gt;Twitter Accounts&lt;/h2&gt;

&lt;p&gt;Previously JRuby related tweets were getting spread across multiple accounts, and the JRuby official account was somewhat dry with content. Twitter is a great information aggregator, and those using the service often want a centralized place to check on related content. If someone asks “Where’s the best place to get JRuby related information?”, the answer should always have an official account with regularly updated content. So with this in mind I’m working with other JRuby team members to keep the account fresh. So please be sure to follow &lt;a href=&quot;https://twitter.com/#!/jruby/&quot;&gt;@JRuby&lt;/a&gt; on Twitter to stay up to date on happenings!&lt;/p&gt;

&lt;p&gt;Now another interesting issue I’ve run into is that there are a few JRuby job postings that trickle through on twitter. At first my main thought was to talk about them on the main @JRuby account. However the problem with that is it has the potential to make @JRuby perceived as a “spammy” account. Also the point of the account is to get job openings pushed out to people that actually care about them. This means they need to be focused to such users. @JRuby can’t achieve this well because the expectation isn’t setup to keep your eyes on the account for updates. To help alleviate these issues, the &lt;a href=&quot;https://twitter.com/#!/JRubyJobs/&quot;&gt;@JRubyJobs&lt;/a&gt; account has been created. If you’re an employer looking for JRuby developers, or a JRuby developer who wants to use their skills in the workplace, be sure to check the account out! Those wanting to have JRuby job opportunities posted to the account please cc @JRubyJobs on the listing, DM the account, or send me an email.&lt;/p&gt;

&lt;h2 id=&quot;jruby-map&quot;&gt;JRuby Map&lt;/h2&gt;

&lt;p&gt;An interesting question that comes up regarding open source communities is where everyone is from. In the internet age open source users are often spread across the globe, sometimes in unexpected places. To attempt to get an idea of where our JRuby users are, I created the &lt;a href=&quot;http://preview.tinyurl.com/jrubyusers&quot;&gt;JRuby User Map&lt;/a&gt;. My hope is to have a more populated map, so that I can see where our biggest user communities lie, but also make sure the smaller communities are recognized as well. Smaller communities are often put off as not worthwhile. However my belief is that these smaller communities are much more crucial. These are users who are working with JRuby in an environment where there is less support, which shows a tremendous amount of dedication. If you’re part of such a community and need help growing please contact me through Twitter or email.&lt;/p&gt;

&lt;p&gt;For those of you who haven’t added themselves to the map, be sure to check out the &lt;a href=&quot;http://blog.jruby.org/2011/11/communitymap&quot;&gt;blog post showing how the process works&lt;/a&gt;. It’s only a few steps and helps us get to know our community better!&lt;/p&gt;

&lt;h2 id=&quot;surveys&quot;&gt;Surveys&lt;/h2&gt;

&lt;p&gt;The best way to get to know users is to ask them questions. With this in mind I created a two surveys and casually posed a JRuby OS/App Server question on twitter. Some results simply confirmed my suspicions, others were quite interesting.&lt;/p&gt;

&lt;h3 id=&quot;java-version-survey&quot;&gt;Java Version Survey&lt;/h3&gt;

&lt;p&gt;First was the &lt;a href=&quot;http://www.surveybuilder.com/s/KQrnk-yKwAA?source_id=3&amp;amp;source_type=web&quot;&gt;Java Version Survey&lt;/a&gt;. The purpose of this survey was to understand which Java version people were running JRuby with. There were a total of 83 respondents to this survey. As the answer was multiple choice, the number of selections, 104, was greater than the number of respondents. As for how the data ended up:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Java 8 - 1 user (1%)&lt;/li&gt;
  &lt;li&gt;Java 7 - 28 users (27%)&lt;/li&gt;
  &lt;li&gt;Java 6 - 72 users (69%)&lt;/li&gt;
  &lt;li&gt;Java 5 - 3 users (3%)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This was more a confirmation of my assumptions. For the most part people are on Java 6, which makes sense as Java 7 came out recently. It also matches the JRuby 1.7 dev (trunk) usage. If you’re using trunk then upgrading to Java 7 is recommended to utilize the invokedynamic enhancements! There’s one brave Java 8 user, and a few Java 5 users still remaining.&lt;/p&gt;

&lt;h3 id=&quot;jruby-version-survey&quot;&gt;JRuby Version Survey&lt;/h3&gt;

&lt;p&gt;Next was to figure out what JRuby version was being used, and what the ratio of 1.8 and 1.9 mode usage was. This particular survey was split into four questions, two development environment questions and two production environment questions (optional of course). There were a total of 59 respondents. The allocation of responses were as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JRuby Development Version - 79 answers&lt;/li&gt;
  &lt;li&gt;JRuby Development Ruby Mode - 59 answers&lt;/li&gt;
  &lt;li&gt;JRuby Production Version - 66 answers&lt;/li&gt;
  &lt;li&gt;JRuby Production Ruby Mode - 54 answers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There weren’t too many respondents who use JRuby only for development. The gap between JRuby dev respondents and answers is most likely due to people running multiple versions for testing. Personally I run 1.6.5 and trunk at the same time! Now for the results:&lt;/p&gt;

&lt;h4 id=&quot;jruby-development-version&quot;&gt;JRuby Development Version&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;JRuby 1.7 dev (git master) - 9 users (11%)&lt;/li&gt;
  &lt;li&gt;JRuby 1.6.5 - 46 users (58%)&lt;/li&gt;
  &lt;li&gt;JRuby 1.6.4 - 12 users (15%)&lt;/li&gt;
  &lt;li&gt;JRuby 1.6.3 - 5 users (6%)&lt;/li&gt;
  &lt;li&gt;JRuby 1.6.2 - 2 user (3%)&lt;/li&gt;
  &lt;li&gt;JRuby 1.6.1 - 1 user (1%)&lt;/li&gt;
  &lt;li&gt;JRuby 1.5 - 3 users (4%)&lt;/li&gt;
  &lt;li&gt;JRuby 1.4 and lower - 1 user (1%)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most users are around 1.6.4 and 1.6.5, with a good number using trunk. This is expected for development use.&lt;/p&gt;

&lt;h4 id=&quot;jruby-development-1819-mode&quot;&gt;JRuby Development 1.8/1.9 Mode&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Ruby 1.8 Mode - 19 users (32%)&lt;/li&gt;
  &lt;li&gt;Ruby 1.9 Mode - 28 users (47%)&lt;/li&gt;
  &lt;li&gt;Both - 12 users (12%)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This was not too surprising. A majority of development users are on 1.9 mode, with the rest between 1.8 mode or both 1.8 and 1.9 mode.&lt;/p&gt;

&lt;h4 id=&quot;jruby-production-version&quot;&gt;JRuby Production Version&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;JRuby 1.7 dev (git master) - 2 users (3%)&lt;/li&gt;
  &lt;li&gt;JRuby 1.6.5 - 37 users (56%)&lt;/li&gt;
  &lt;li&gt;JRuby 1.6.4 - 9 users (14%)&lt;/li&gt;
  &lt;li&gt;JRuby 1.6.3 - 8 users (12%)&lt;/li&gt;
  &lt;li&gt;JRuby 1.6.2 - 1 users (2%)&lt;/li&gt;
  &lt;li&gt;JRuby 1.6.1 - 1 user (2%)&lt;/li&gt;
  &lt;li&gt;JRuby 1.5 - 6 users (9%)&lt;/li&gt;
  &lt;li&gt;JRuby 1.4 and lower - 1 user (3%)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The 2 users of 1.7 dev was a bit of a surprise. If you’re out there and reading this please shoot me an email on how you’re using it and how it’s working for you! There are a lot of 1.6.5 users, which means a majority of users are good about keeping up to date (since 1.6.5 was very recently released). There are noticeable number of 1.5 users, which is understandable given that some business are very conservative about technology related changes. If however there’s a bug or other reason which is blocking you from upgrading to the 1.6 please let us know! Having everyone on the same page is what we’d like to achieve.&lt;/p&gt;

&lt;h4 id=&quot;jruby-1819-mode&quot;&gt;JRuby 1.8/1.9 Mode&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Ruby 1.8 mode - 26 users (48%)&lt;/li&gt;
  &lt;li&gt;Ruby 1.9 mode - 17 users (31%)&lt;/li&gt;
  &lt;li&gt;Both - 11 users (20%)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The results here were a bit intriguing, as I was expecting a far larger gap between 1.8 and 1.9 mode usage. It will be interesting to revisit this question again when JRuby 1.7 becomes officially released. For those using both 1.8 and 1.9 mode, let us know how the Ruby mode usage is split up for your particular case.&lt;/p&gt;

&lt;h3 id=&quot;jruby-and-rails-deployment-survey&quot;&gt;JRuby and Rails Deployment Survey&lt;/h3&gt;

&lt;p&gt;The question was posed as to what OS and what app server was used for JRuby and Rails deployment. Most users mentioned that they were doing development work on Mac OS X, which is normal for the Ruby community in general. The server operating systems were a mix of RedHat and Debian based (RedHat, CentOS, Fedora, Debian, Ubuntu). There were a few Windows users (Windows 2008 Server), and a Solaris and AIX user. As for the app servers, Tomcat had the lead with Jetty, Trinidad and Torquebox also getting mentions.  A few users also mentioned WebSphere and Glassfish.&lt;/p&gt;

&lt;p&gt;This leads me to the conclusion that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We need to ensure the install guide for these app servers is up to date, especially the widely used Tomcat server.&lt;/li&gt;
  &lt;li&gt;On that note finding links to the official pages of specific distributions on installing JRuby would be helpful&lt;/li&gt;
  &lt;li&gt;A lot of users were noting that Mac OS X is their main development box, so revisiting the installer and ensuring it meets its needs would be a good idea&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
  
    <entry>
      <title>The JRuby User Map</title>
      <link href="http://blog.jruby.org/2011/11/communitymap"/>
      <updated>2011-11-13T00:00:00-05:00</updated>
      <id>http://blog.jruby.org/2011/11/communitymap</id>
      <author>
        <name>Chris White</name>
        <email>cwprogram@live.com</email>
      </author>
      <content type="html">&lt;p&gt;Google maps provides an interesting feature for creating personalized maps. It is possible to allow these custom maps to be edited by others using collaboration features. With this in mind I’ve created a &lt;a href=&quot;http://preview.tinyurl.com/jrubyusers&quot;&gt;JRuby Users Map&lt;/a&gt;. The map looks like this at the moment:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/V8IRn.png&quot; alt=&quot;JRuby User Map&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;adding-yourself-to-the-map&quot;&gt;Adding Yourself To The Map&lt;/h2&gt;

&lt;p&gt;Adding yourself to the map takes a few simple steps. First off you will need a Google account to access the map. For those of you who don’t, see the wiki instructions at the end. Once logged in, click on the link to the map given. Then search for the location that you wish to add. As an example I’ll search for Portland to add the Engine Yard Portland office:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/H2Qxc.png&quot; alt=&quot;Portland Search&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next click on “Save To Map” on the left hand side. This will bring up a select box where you can select the “JRuby Users” map:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/EOTpx.png&quot; alt=&quot;Save To Map&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, click “Save” to confirm and your location will be added:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/KNCZG.png&quot; alt=&quot;Location Saved&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you can also customize the location marker. To do so, return to the JRuby Users map using the original link. Then click the “Edit” button on the left, which will allow you to edit your entry:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/bqHdW.png&quot; alt=&quot;Editing A Location&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Make your edits (in this case I edited the title to “Engine Yard (Portland)”) and click “Save”, then “Done” on the left hand side to complete. This is the final result after the edit:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/TAqz6.png&quot; alt=&quot;The EY Portland Office Shown&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;-you-can-also-add-yourself-to-the-wiki&quot;&gt;… You Can Also Add Yourself To The Wiki!&lt;/h2&gt;

&lt;p&gt;JRuby Guy Charles Nutter has also created a wiki page on the JRuby wiki titled &lt;a href=&quot;https://github.com/jruby/jruby/wiki/In-Your-Region&quot;&gt;In Your Region&lt;/a&gt; that you can add yourself to as well. This is alternative to those with JS restrictions of some sort, or those who don’t have a Google account.&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>JRuby and ClojureScript Goodness</title>
      <link href="http://blog.jruby.org/2011/11/jruby-clojurescript"/>
      <updated>2011-11-11T00:00:00-05:00</updated>
      <id>http://blog.jruby.org/2011/11/jruby-clojurescript</id>
      <author>
        <name>Chris White</name>
        <email>cwprogram@live.com</email>
      </author>
      <content type="html">&lt;p&gt;While Java is a major language on the JVM, it’s not the only one JRuby can interface with. JRuby can work with other JVM languages such as Scala, Groovy, and Clojure. JRuby committer Yoko Harada (&lt;a href=&quot;https://twitter.com/#!/yokolet&quot;&gt;@yokolet&lt;/a&gt;) has been doing some interesting work with &lt;a href=&quot;https://github.com/clojure/clojurescript&quot;&gt;ClojureScript&lt;/a&gt;, a Clojure to JS compiler. This post will take a look at how JRuby was used to help bring ClojureScript to Tilt, and in doing so the Rails Asset Pipeline.&lt;/p&gt;

&lt;h2 id=&quot;clojurescript-and-tilt&quot;&gt;ClojureScript and Tilt&lt;/h2&gt;

&lt;p&gt;The first experiment was getting ClojureScript to work with &lt;a href=&quot;https://github.com/rtomayko/tilt&quot;&gt;Tilt&lt;/a&gt;, which is a “Generic interface to multiple Ruby template engines”. Yoko’s blog post &lt;a href=&quot;http://yokolet.blogspot.com/2011/11/tilt-template-for-clojurescript.html&quot;&gt;Tilt Template for ClojureScript&lt;/a&gt; describes the process of getting the two technologies to work together. JRuby’s jar import functionality was used to interact with the ClojureScript related jars, which allowed Ruby to be used to bring everything together. For those interested in taking a look, there is a &lt;a href=&quot;https://github.com/yokolet/clementine&quot;&gt;git repository&lt;/a&gt; with the code available to check out.&lt;/p&gt;

&lt;h2 id=&quot;clojurescript-and-the-rails-asset-pipeline&quot;&gt;ClojureScript and The Rails Asset Pipeline&lt;/h2&gt;

&lt;p&gt;It doesn’t stop there though! Since ClojureScript was available to Tilt, the next step was seeing if that could be used to interface with the &lt;a href=&quot;http://guides.rubyonrails.org/asset_pipeline.html&quot;&gt;Rails Asset Pipeline&lt;/a&gt;. The guide has a short snippet on registering gems with Tilt to get them recognized by Sprockets, which Yoko describes in the blog post &lt;a href=&quot;http://yokolet.blogspot.com/2011/11/clojurescript-on-rails-asset-pipeline.html&quot;&gt;ClojureScript on Rails Asset Pipeline&lt;/a&gt;. A great example of how JRuby can be use to do cool things with cool JVM technologies! This is also another reason to keep your eyes on the &lt;a href=&quot;https://github.com/yokolet/clementine&quot;&gt;git repository&lt;/a&gt; to watch for new developments.&lt;/p&gt;

&lt;h2 id=&quot;you-can-do-closure-too&quot;&gt;You Can Do Closure Too!&lt;/h2&gt;

&lt;p&gt;ClojureScript uses the &lt;a href=&quot;http://code.google.com/closure/&quot;&gt;Google Closure compiler&lt;/a&gt; behind the scenes to make the JS compilation process happen. &lt;a href=&quot;http://www.instellaplatform.com/&quot;&gt;Instella&lt;/a&gt; CEO &lt;a href=&quot;https://twitter.com/#!/dylancvaughn&quot;&gt;Dylan Vaughn&lt;/a&gt; was inspired by a post on Closure Templates Discuss titled &lt;a href=&quot;https://groups.google.com/group/closure-templates-discuss/browse_thread/thread/50d977fcc121953b&quot;&gt;Closure Templates in Ruby&lt;/a&gt; to take a look on bringing JRuby and Closure together. Using some code for using &lt;a href=&quot;https://github.com/igrigorik/closure-sprockets&quot;&gt;Closure’s soy compiler with the Rails Asset Pipeline&lt;/a&gt; by Googler &lt;a href=&quot;https://twitter.com/#!/igrigorik&quot;&gt;Ilya Grigorik&lt;/a&gt;, he was able to interface the two together. The result of this is the &lt;a href=&quot;https://github.com/dylanvaughn/closure-templates&quot;&gt;closure-templates gem&lt;/a&gt;, installable with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install closure-templates&lt;/code&gt;. Be sure to check it out!&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Recent JRuby Conference Videos and Materials</title>
      <link href="http://blog.jruby.org/2011/11/jruby-conferences"/>
      <updated>2011-11-08T00:00:00-05:00</updated>
      <id>http://blog.jruby.org/2011/11/jruby-conferences</id>
      <author>
        <name>Chris White</name>
        <email>cwprogram@live.com</email>
      </author>
      <content type="html">&lt;p&gt;At any one time there always seems to be a number of conferences coming up or taking place. These conferences are an excellent way to interact with members of the JRuby community. However not everyone can make it to every single conference. Fortunately sites like &lt;a href=&quot;http://confreaks.net/&quot;&gt;Confreaks&lt;/a&gt;, &lt;a href=&quot;http://www.slideshare.net/&quot;&gt;SlideShare&lt;/a&gt;, and &lt;a href=&quot;http://lanyrd.com/&quot;&gt;Lanyard&lt;/a&gt; have made it easy to access pre-recorded conference videos, slides, and other materials. This post is meant to introduce some highlight videos and materials from recent conferences where JRuby presentations were held.&lt;/p&gt;

&lt;h2 id=&quot;but-first-jrubyconf-is-coming&quot;&gt;But First, JRubyConf Is Coming!&lt;/h2&gt;

&lt;p&gt;As was &lt;a href=&quot;https://twitter.com/#!/JRubyConf/status/134019937818771456&quot;&gt;announced on Twitter&lt;/a&gt;, JRubyConf 2012 will be taking place in Minneapolis, Minnesota from May 21st - 23rd. The JRuby team has some great things planned, so be sure to keep your eyes on the &lt;a href=&quot;https://twitter.com/#!/JRubyConf&quot;&gt;@JRubyConf&lt;/a&gt; account for more updates.&lt;/p&gt;

&lt;h2 id=&quot;startech-conf&quot;&gt;StarTech Conf&lt;/h2&gt;

&lt;h3 id=&quot;building-languages-for-the-jvm&quot;&gt;Building Languages for the JVM&lt;/h3&gt;

&lt;p&gt;It used to be that Java was the main language to interface with the JVM. This has changed with languages such as Clojure, Scala, and Groovy stepping up to provide alternative ways to utilize the platform. What exactly goes into making a language for it? JRuby Guy Charles Nutter takes a look at the challenges for implementing a language using JRuby as a case study. Slides for the presentation are available on &lt;a href=&quot;http://www.slideshare.net/CharlesNutter/star-techconf-2011-jvm-languages&quot;&gt;slideshare&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;ruby-midwest&quot;&gt;Ruby Midwest&lt;/h2&gt;

&lt;h3 id=&quot;recommendation-engines-using-machine-learning-and-jruby&quot;&gt;Recommendation Engines using Machine Learning, and JRuby&lt;/h3&gt;

&lt;p&gt;Wonder how a site like NetFlix recommends movies to users? Matt Kirk discusses how such recommendation engines work and how to implement one in JRuby. &lt;a href=&quot;http://matthewkirk.com/presentations/Support-Vector-Machines-with-Jruby.pdf&quot;&gt;PDF Slides&lt;/a&gt; are available from the author’s website.&lt;/p&gt;

&lt;h3 id=&quot;high-performance-ruby-threading-versus-evented&quot;&gt;High Performance Ruby: Threading versus Evented&lt;/h3&gt;

&lt;p&gt;While not specific to JRuby, Dr. Nic takes a look at the often debated topic of threaded versus evented when dealing with high performance Ruby. In particular JRuby is mentioned for how it handles the threaded concurrency issue. Slides are available on &lt;a href=&quot;http://speakerdeck.com/u/drnic/p/high-performance-ruby-threading-versus-evented-ruby-midwest-edition&quot;&gt;Slideshare&lt;/a&gt; for viewing (there’s also a PDF download link). There’s also a &lt;a href=&quot;http://windycityrails.org/videos2011/#1&quot;&gt;recorded video of a previous version of the talk from Windy City Rails&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;ruby-conference&quot;&gt;Ruby Conference&lt;/h2&gt;

&lt;h3 id=&quot;be-a-minecraft-modman-with-purugin&quot;&gt;Be a Minecraft modman with Purugin&lt;/h3&gt;

&lt;p&gt;Minecraft is a game that has gained an immense following. Users explore worlds and construct things along the way. However, there are a unique set of users who like to tinker around with the game and create mods for it. These users are known as modman, or so JRuby team member Thomas Enebo has decided to call them. This talk discusses Purugin, a framework that uses JRuby to allow for creating Minecraft plugins using Ruby syntax. A video of the talk is available at &lt;a href=&quot;http://confreaks.net/videos/696-rubyconf2011-be-a-minecraft-modman-with-purugin&quot;&gt;Confreaks&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;jruby-polyglot-heaven&quot;&gt;JRuby: Polyglot Heaven&lt;/h3&gt;

&lt;p&gt;With languages such as Scala, Clojure, and Groovy setting a new trend for languages on the JVM, projects utilizing multiple languages are not a rare site. This talk by JRuby team members Charles Nutter and Thomas Enebo takes a look at how JRuby can be used to interact with other JVM languages. A video of the talk is available at &lt;a href=&quot;http://confreaks.net/videos/684-rubyconf2011-jruby-polyglot-heaven&quot;&gt;Confreaks&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;jruby-and-big-data&quot;&gt;JRuby and Big Data&lt;/h3&gt;

&lt;p&gt;Jeremy Hinegardner presents different ways that JRuby can work with big data. The talk discusses interfacing with big data solutions such as &lt;a href=&quot;http://hadoop.apache.org/&quot;&gt;Apache Hadoop&lt;/a&gt;, &lt;a href=&quot;http://hadoop.apache.org/hdfs/&quot;&gt;HDFS&lt;/a&gt;, &lt;a href=&quot;http://avro.apache.org/&quot;&gt;Avro&lt;/a&gt;, and more. A video of the talk can be found on &lt;a href=&quot;http://confreaks.net/videos/674-rubyconf2011-jruby-and-big-data&quot;&gt;Confreaks&lt;/a&gt; and &lt;a href=&quot;http://www.youtube.com/watch?v=MBXH0P5tB2g&quot;&gt;Youtube&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; Added RubyConf Brazil Talks. Thanks to @qmx on twitter for the heads up!&lt;/p&gt;

&lt;h2 id=&quot;rubyconf-brazil&quot;&gt;RubyConf Brazil&lt;/h2&gt;

&lt;h3 id=&quot;jruby-on-steroids&quot;&gt;JRUBY ON STEROIDS&lt;/h3&gt;

&lt;p&gt;Technology is constantly improving, and the JVM is no exception. JRuby contributor Douglas Campos  takes a look at Java7’s improvements for dynamic languages, and how JRuby benefits from them. &lt;a href=&quot;http://cdn.qmx.me/presentations/2011/rubyconfbr/index.html&quot;&gt;HTML Slides&lt;/a&gt; can be found on the author’s website. A video recording in Brazilian Portuguese can be found at &lt;a href=&quot;http://www.eventials.com/rubyconfbr/recorded/M2UzZTJkMzY2MzdiNTg2NTUxNWM1MzI3NWY1YjRhMzYjIzM5Ng_3D_3D&quot;&gt;eventials&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;torquebox---crossing-the-chasm-between-java-and-ruby&quot;&gt;TORQUEBOX - CROSSING THE CHASM BETWEEN JAVA AND RUBY&lt;/h3&gt;

&lt;p&gt;Scale is always a hot topic in the web development world. However you don’t have to reinvent the wheel to achieve it. TorqueBox contributor Bruno Oliveira looks at how Rails/Sinatra/Rack applications can be combined with JVM technologies to provide scalable applications. Slides can be found at &lt;a href=&quot;http://www.slideshare.net/bruno.abstractj/torquebox-ultrapassando-a-fronteira-entre-java-e-ruby&quot;&gt;slideshare&lt;/a&gt;. A video recording in Brazilian Portuguese can be found at &lt;a href=&quot;http://www.eventials.com/rubyconfbr/recorded/M2UzZTJkMzY2MzdiNTg2NTUxNWM1MzI3NWY1YjRhMzYjIzM5OQ_3D_3D&quot;&gt;eventials&lt;/a&gt;.&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Why Isn't JRuby Implemented in Ruby?</title>
      <link href="http://blog.jruby.org/2011/10/why-isnt-jruby-implemented-in-ruby"/>
      <updated>2011-10-24T00:00:00-04:00</updated>
      <id>http://blog.jruby.org/2011/10/why-isnt-jruby-implemented-in-ruby</id>
      <author>
        <name>Charles Oliver Nutter</name>
        <email>headius@headius.com</email>
      </author>
      <content type="html">&lt;p&gt;As Ruby implementations mature and Ruby code runs faster and faster,
the question starts to come up again and again: why not implement
more in Ruby? There’s many good reasons to do it: easier for Rubyists
to maintain and contribute; no native library dependencies; better
visibility for debuggers and profilers; consistency all the way into
the core… the list goes on. As you’d expect, we often get this
question about JRuby itself, given that JRuby now runs Ruby code very
fast and most Rubyists would rather not read or write Java code. So
why isn’t JRuby implemented in Ruby?&lt;/p&gt;

&lt;p&gt;The answer: it’s complicated.&lt;/p&gt;

&lt;h2 id=&quot;ruby-is-not-the-best-language-for-everything&quot;&gt;Ruby is Not the Best Language for Everything&lt;/h2&gt;

&lt;p&gt;The simplest answer is perhaps the most obvious: Ruby isn’t always
the best tool. There’s many cases where Ruby’s dispatch overhead,
coercion protocols, arbitrary-precision integers, or mutable types
get in the way of expressivity or performance. What makes Ruby
“beautiful” sometimes obscures intent from either the programmer or
the underlying platform.&lt;/p&gt;

&lt;p&gt;Performance is obviously a key issue. Sometimes, you really need raw
native maths or byte arrays and Fixnum, Float, and Array introduce too
much overhead. Using Java gives us a “known quantity” when it comes
to performance.&lt;/p&gt;

&lt;p&gt;Now of course I’m not saying Ruby won’t continue to get faster and
faster. JRuby on Java 7 has started to approach Java performance for
many algorithms, and as JRuby and the JVM improve, the gap will
continue to narrow. But optimizing a dynamic language is challenging
even on the best VMs, so it’s nice to have that “known quantity”
when performance is critical.&lt;/p&gt;

&lt;h2 id=&quot;jrubys-a-ruby-implementation-and-a-jvm-language&quot;&gt;JRuby’s a Ruby Implementation &lt;em&gt;and&lt;/em&gt; a JVM Language&lt;/h2&gt;

&lt;p&gt;Then there’s also the matter of interfacing with statically-typed JVM
libraries. JRuby makes heavy use of JVM libraries for much of its
internals. That has meant we don’t have to implement our own
collections, IO subsystem, JVM bytecode generator, YAML 1.1, and
much more. Of course some of these could be called via our Java
integration layer, but there’s always a bit more overhead down that
road than by having Java calling Java.&lt;/p&gt;

&lt;p&gt;Almost as important is the fact that nearly all of JRuby’s core
classes can be called as normal Java classes from any piece of JVM
code. Java integration is a two-way street, and having Ruby-only
implementations would make one direction more challenging to
support.&lt;/p&gt;

&lt;h2 id=&quot;dont-throw-out-the-baby&quot;&gt;Don’t Throw Out the Baby&lt;/h2&gt;

&lt;p&gt;Moving to Ruby for new code is easy enough, but moving existing
code to Ruby would mean throwing out known-working, battle-tested,
optimized Java implementations for something completely new. Any
good developer knows that a “big rewrite” seldom ends well, so
we’d be doing a great disservice to the thousands of JRuby users
out there by making a wholesale move to Ruby. There’s no measure
of benefit (from rewriting in Ruby) that would outweigh losing
years of maturity in our codebase.&lt;/p&gt;

&lt;h2 id=&quot;inertia&quot;&gt;Inertia&lt;/h2&gt;

&lt;p&gt;Inertia may be the biggest motivator here. The JRuby committers
are very familiar with Java and with the current implementation.
They also may know Ruby very well, but change is always
accompanied by some measure of confusion.&lt;/p&gt;

&lt;p&gt;Most of the JRuby core team manages a subset of JRuby; Tom Enebo
works on parser, interpreter, and the new IR compiler. Nick Sieger
works on libraries like activerecord-jdbc and jruby-rack. Wayne
Meissner works on our native library integration layers like FFI.
I work on compilation, optimization, and Java integration. Do we
force everyone to start writing in Ruby when they may prefer to use
Java?&lt;/p&gt;

&lt;h2 id=&quot;developer-pool&quot;&gt;Developer Pool&lt;/h2&gt;

&lt;p&gt;As much as Ruby has grown in recent years, there are still far
more Java developers in the world. They may not &lt;em&gt;love&lt;/em&gt; the
language, but they represent a tremendous potential pool of
contributors to JRuby. Yes, it’s true that a Java developer is
probably less likely to contribute to JRuby than a Rubyist…
but there’s still a hell of a lot of them out there.&lt;/p&gt;

&lt;p&gt;There’s also a very large portion of JRuby users (perhaps even
a majority) that are either primarily or originally Java folks.
Having a mostly-Java codebase means they can more easily
investigate bugs, integrate JRuby into their JVM-based
applications, and generally reason about how JRuby &lt;em&gt;actually&lt;/em&gt;
works. That’s very powerful.&lt;/p&gt;

&lt;h2 id=&quot;but-we-still-want-to-do-it&quot;&gt;But We Still Want to Do It!&lt;/h2&gt;

&lt;p&gt;Even though I list a bunch of reasons for having a mostly
Java codebase, we do recognize that Ruby is an excellent tool
for both writing apps and for implementing Ruby’s core. And
we have always intended to make it possible for JRuby to use
more Ruby code as part of the core implementation, even if
we never do a wholesale rewrite.&lt;/p&gt;

&lt;p&gt;To that end, I’ve started restructing the (admittedly small)
Ruby-based “kernel” of JRuby into a structure that’s more
approachable to Rubyists that want to contribute to JRuby. The
restructured Ruby kernel is under &lt;a href=&quot;https://github.com/jruby/jruby/tree/master/src/jruby&quot;&gt;src/jruby&lt;/a&gt;,
and while there’s not much there right now we’re willing to
accept new code in either Ruby &lt;em&gt;or&lt;/em&gt; Java. If it becomes a
performance or integration problem, we may rewrite that code
in Java…but having a working implementation in Ruby is far
better than having nothing at all.&lt;/p&gt;

&lt;h2 id=&quot;whither-rubinius&quot;&gt;Whither Rubinius?&lt;/h2&gt;

&lt;p&gt;You might be asking yourself “why not just use &lt;a href=&quot;https://github.com/rubinius/rubinius&quot;&gt;Rubinius&lt;/a&gt;’s
kernel?” We’ve always hoped (maybe intended) to use as much
as possible of Rubinius’s mostly-Ruby kernel in JRuby, if
at some point that seemed feasible. With recent performance
improvements in JRuby, that day may be approaching. We would
need to patch away anything that’s Rubinius-specific, but I
have toyed with how to start using Rubinius’s kernel in JRuby
several times in the past few years. If we can borrow their
code for missing or poorly-implemented parts of JRuby, it
would be stupid for us not to do so.&lt;/p&gt;

&lt;p&gt;It’s also worth pointing out that Rubinius has very few of the
challenges JRuby does when it comes to integrating with an
existing platform. Rubinius was designed as a Ruby VM alone,
so there’s no equivalent to Java integration. When Rubinius
wants to utilize native libraries, they do what we do: write
wrapper logic in C/++ (equivalent to JRuby’s Java code) or bind
those libraries with FFI (similar to but more basic than our Java
integration). And Rubinius exposes no native, statically-typed
API to its implementation classes.&lt;/p&gt;

&lt;h2 id=&quot;how-can-you-help&quot;&gt;How Can You Help?&lt;/h2&gt;

&lt;p&gt;Right now we’re looking to use Ruby mostly for missing features.
Since we’re still in the midst of filling out Ruby 1.9.2 and
1.9.3 features, that’s a good place to start.&lt;/p&gt;

&lt;p&gt;We use and contribute to RubySpec, just like Rubinius does,
so you can easily find missing or broken features by looking under
&lt;a href=&quot;https://github.com/jruby/jruby/tree/master/spec/tags&quot;&gt;spec/tags&lt;/a&gt;
in our codebase.&lt;/p&gt;

&lt;p&gt;(RubySpec supports the concept of “tagging”, where known-failing
specs can be “tagged” until they pass. This allows implementations
to maintain a “watermark” of passing specs over time, and allows
contributors to easily see and fill in implementation gaps.)&lt;/p&gt;

&lt;p&gt;You’ll want to fetch the revision of RubySpec we currently test
against by running &lt;em&gt;rake spec:fetch_stable_specs&lt;/em&gt; (or &lt;em&gt;ant
fetch-stable-specs&lt;/em&gt;; git must be installed in both cases), but
after that you can run specs using &lt;a href=&quot;https://github.com/rubyspec/mspec&quot;&gt;spec/mspec/bin/mspec&lt;/a&gt;
in the usual way.&lt;/p&gt;

&lt;p&gt;And of course if there are Ruby 1.8 or 1.9 features that are
weakly specified by available tests, we strongly encourage
you to contribute specs directly to the &lt;a href=&quot;http://rubyspec.org/&quot;&gt;RubySpec&lt;/a&gt;
project, so that all implementations can benefit.&lt;/p&gt;

&lt;p&gt;We hope that making it easier to implement JRuby using Ruby
code will make it more approachable to Rubyists, and we’re
looking forward to helping you craft your first pull request! Stop
by #jruby on Freenode IRC this week and we’ll help you out!&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>The Painting's on the Wall</title>
      <link href="http://blog.jruby.org/2011/10/the-painting's-on-the-wall"/>
      <updated>2011-10-13T00:00:00-04:00</updated>
      <id>http://blog.jruby.org/2011/10/the-painting's-on-the-wall</id>
      <author>
        <name>Shane Becker</name>
        <email>veganstraightedge@gmail.com</email>
      </author>
      <content type="html">&lt;p&gt;The fine folks at &lt;a href=&quot;http://lunarlogicpolska.com&quot; title=&quot;Agile Ruby on Rails offshore development experts - Lunar Logic Polska&quot;&gt;Lunar Logic Polska&lt;/a&gt; love JRuby so much that they put their money where their mouth is. Or rather, they put their paint where their heart is. Showing their affection for JRuby, they painted &lt;a href=&quot;http://twitter.com/headius/status/110383651321155584&quot;&gt;JRuby Duke on their office wall&lt;/a&gt; for everyone to see.&lt;/p&gt;

&lt;p&gt;First, they used a projector to trace the image onto the wall (an effective and simple solution that I’ve used before too).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://plus.google.com/photos/116133683664833809819/albums/5648208621355151441/5648069536162686882&quot;&gt;&lt;img src=&quot;http://jruby.org/images/blog.jruby.org/10-2011/jruby-duke-painting-at-lunar-logic-polska-1.jpg&quot; alt=&quot;Tracing the image onto the wall&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Many hands make light work.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://plus.google.com/photos/116133683664833809819/albums/5648208621355151441/5648081364918986146&quot;&gt;&lt;img src=&quot;http://jruby.org/images/blog.jruby.org/10-2011/jruby-duke-painting-at-lunar-logic-polska-2.jpg&quot; alt=&quot;Two people painting&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Almost there. Almost there.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://plus.google.com/photos/116133683664833809819/albums/5648208621355151441/5648088994116813986&quot;&gt;&lt;img src=&quot;http://jruby.org/images/blog.jruby.org/10-2011/jruby-duke-painting-at-lunar-logic-polska-3.jpg&quot; alt=&quot;Rough draft&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Putting on the finishing touches.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://plus.google.com/photos/116133683664833809819/albums/5648208621355151441/5648127313070080274&quot;&gt;&lt;img src=&quot;http://jruby.org/images/blog.jruby.org/10-2011/jruby-duke-painting-at-lunar-logic-polska-4.jpg&quot; alt=&quot;Polishing the details&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The final product.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://plus.google.com/photos/116133683664833809819/albums/5648208621355151441/5648130242076135122&quot;&gt;&lt;img src=&quot;http://jruby.org/images/blog.jruby.org/10-2011/jruby-duke-painting-at-lunar-logic-polska-5.jpg&quot; alt=&quot;Finished painting&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clearly, the Lunar Logic Polska team is full of very smart and good looking people!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://plus.google.com/photos/116133683664833809819/albums/5648208621355151441/5649601724908159026&quot;&gt;&lt;img src=&quot;http://jruby.org/images/blog.jruby.org/10-2011/jruby-duke-painting-at-lunar-logic-polska-6.jpg&quot; alt=&quot;Lunar Logic Polska team&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://plus.google.com/photos/116133683664833809819/albums/5648208621355151441&quot;&gt;See the full gallery on Konrad Malawski’s Google Plus account.&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Bringing JRuby to the Cloud</title>
      <link href="http://blog.jruby.org/2011/09/bringing-jruby-to-the-cloud"/>
      <updated>2011-09-28T00:00:00-04:00</updated>
      <id>http://blog.jruby.org/2011/09/bringing-jruby-to-the-cloud</id>
      <author>
        <name>Charles Oliver Nutter</name>
        <email>headius@headius.com</email>
      </author>
      <content type="html">&lt;p&gt;My friends, I’m proud to announce we’ve reached another milestone with JRuby: the full, non-beta, general availability of &lt;a href=&quot;http://www.engineyard.com/blog/2011/jruby-ga-on-an-engine-yard-cloud-near-you/&quot;&gt;Engine Yard Cloud’s JRuby support&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;The release of JRuby on our Cloud comes after years of work on JRuby and months of work by &lt;a href=&quot;http://twitter.com/calavera&quot;&gt;David Calvera&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/hiro_asari&quot;&gt;Hiro Asari&lt;/a&gt;, and the awesome &lt;a href=&quot;http://docs.engineyard.com/appcloud-tech-stack.html&quot;&gt;stack team&lt;/a&gt; at Engine Yard. It is, in many ways, the “big goal” we had when &lt;a href=&quot;http://twitter.com/tom_enebo&quot;&gt;Tom Enebo&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/nicksieger&quot;&gt;Nick Sieger&lt;/a&gt; and &lt;a href=&quot;http://twitter.com/headius&quot;&gt;I&lt;/a&gt; came to Engine Yard in 2009 to continue working on JRuby. We’re very excited to have accomplished our big goal for JRuby at Engine Yard, and will now look forward to new goals and milestones. But what does this mean to you? And how did we get here?&lt;/p&gt;

&lt;h2 id=&quot;jruby-on-engine-yard-cloud&quot;&gt;JRuby on Engine Yard Cloud&lt;/h2&gt;

&lt;p&gt;If you’ve ever used Engine Yard Cloud before, you already know what it feels like. JRuby support looks and feels pretty much the same; you just select JRuby from the Ruby versions drop-down, choose Trinidad, and deploy your app as normal. Provisioning, deployment, and migration all happen for you automatically. You can configure Trinidad to spin up enough JRuby instances to handle your concurrent load, or run “threadsafe” using a single instance. And that’s it! You have your JRuby application in the cloud, with support from the best team in the Ruby cloud universe.&lt;/p&gt;

&lt;p&gt;The Cloud’s support for JRuby represents milestones for the wider Ruby world, too. It’s obviously the first cloud to officially support JRuby, but it’s also the first cloud with a concurrency-capable Ruby and the first cloud supporting an alternative Ruby implementation. You get the best cloud with the best support story and one of the best Ruby implementations on one of the best VMs in the world. What’s not to love?&lt;/p&gt;

&lt;p&gt;We at Engine Yard and on the JRuby team are very proud to have finally achieved this milestone. Let’s take a look back at the past five years of JRuby that led us to this point.&lt;/p&gt;

&lt;h2 id=&quot;a-brief-history&quot;&gt;A Brief History&lt;/h2&gt;

&lt;p&gt;I’ve talked about the history of JRuby in many posts, and I’m preparing one on JRuby’s 10-year anniversary as you read this. The journey really started in 2006, when Tom and I first demonstrated JRuby running a Rails application at JavaOne. That was &lt;a href=&quot;http://sourceforge.net/project/shownotes.php?release_id=405255&quot;&gt;JRuby 0.8.3&lt;/a&gt;, and six months prior we couldn’t even run IRB. In those days, the JVM world was just starting to explore alternative languages, with most of that attention on Jython and Groovy. Scala, Clojure, and the other half-dozen “new” JVM languages you may have heard about were either still growing up or still hiding behind the curtain of academia.&lt;/p&gt;

&lt;p&gt;That first demo saw JRuby running on WEBrick, because there were no other servers for JRuby yet. No native DB support existed for JRuby, so we had to get the pure-Ruby MySQL driver working. We were able to install gems and run IRB, but the Rails console didn’t work and everything felt ready to fly apart. Just days before JavaOne, we got it working.&lt;/p&gt;

&lt;p&gt;Tom and I were sitting at the Espresso Royale coffee shop near the University of Minnesota campus, walking through the basic CRUD operations and making sure everything functioned. It all seemed to work – and that was very exciting – but the performance was really dreadful. It took seconds for each page refresh, sometimes so long we thought the app had hung.&lt;/p&gt;

&lt;p&gt;On a hunch, we started looking for Rails tuning advice. One page talked about something called “development mode” and highly recommended using “production mode” for production applications. Without any other leads, we flipped the switch…and the JRuby on Rails age dawned! Performance was not spectacular, but it was totally acceptable for a first public showing. Rails was running atop the JVM, and JRuby made it possible!&lt;/p&gt;

&lt;p&gt;A year later, Tom and I had accepted positions at Sun Microsystems and were preparing to release &lt;a href=&quot;http://blog.headius.com/2007/06/jruby-10-released.html&quot;&gt;JRuby 1.0&lt;/a&gt; for JavaOne 2007. We were optimistic…we felt like JRuby was ready for simple, non-critical production apps, and we were eager to show the JVM world what we could do. This time, we had Nick Sieger’s ActiveRecord-JDBC for database access and an early precursor to jruby-rack called “GoldSpike” (after the golden spike that joined east to west in the early USA rail system) to allow servlet engines to serve up Rails requests.&lt;/p&gt;

&lt;p&gt;JRuby 1.0 was fully interpreted, quite slow, and far less Ruby-compatible than JRuby today, but it worked. And it was enough to draw in a few early production users like Oracle and Thoughtworks.&lt;/p&gt;

&lt;p&gt;The next year saw the release of &lt;a href=&quot;http://docs.codehaus.org/display/JRUBY/2008/04/05/JRuby+1.1+Released&quot;&gt;JRuby 1.1&lt;/a&gt;, the first Ruby implementation ever to incorporate a runtime just-in-time (JIT) compiler to improve performance. We were starting to beat Ruby 1.8 on simple benchmarks, and stability kept increasing.&lt;/p&gt;

&lt;p&gt;JRuby has had many more releases, always focusing on the user’s experience and the user’s needs. JRuby 1.1.1 through 1.1.6 made huge leaps forward in compatibility and performance, and JRuby 1.2 may have been the first release &lt;em&gt;really&lt;/em&gt; ready for production. &lt;a href=&quot;http://www.jruby.org/2009/06/03/jruby-1-3-0.html&quot;&gt;JRuby 1.3&lt;/a&gt;, &lt;a href=&quot;http://jruby.org/2009/11/02/jruby-1-4-0&quot;&gt;1.4&lt;/a&gt;, and &lt;a href=&quot;http://jruby.org/2010/05/12/jruby-1-5-0.html&quot;&gt;1.5&lt;/a&gt; each involved thousands of commits and hundreds of fixed bugs, along with more and more production users ranging from &lt;a href=&quot;http://www.osl.no/en/osl&quot;&gt;airports&lt;/a&gt; to the &lt;a href=&quot;http://www.seti.org/ata&quot;&gt;Allen Telescope Array&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This year, we released &lt;a href=&quot;http://jruby.org/2011/03/15/jruby-1-6-0.html&quot;&gt;JRuby 1.6&lt;/a&gt; with Ruby 1.9 features and experimental support for C extensions, and have done four 1.6.x maintenance releases (with a fifth just around the corner). JRuby 1.7 will take advantage of the new “invokedynamic” support in Java 7, and runs far faster than any previous release.&lt;/p&gt;

&lt;p&gt;JRuby is now more compatible and boasts better performance than ever before, and has earned a place in both the Ruby and Java worlds.&lt;/p&gt;

&lt;h2 id=&quot;jruby-meets-the-cloud&quot;&gt;JRuby meets the Cloud&lt;/h2&gt;

&lt;p&gt;The earliest talk about JRuby at Engine Yard started in late 2008. &lt;a href=&quot;http://twitter.com/tmornini&quot;&gt;Tom Mornini&lt;/a&gt; reached out to us, interested in talking about what a JRuby-powered Engine Yard offering might look like. We talked on and off with him and other Engine Yarders in early 2009, and finally visited the Engine Yard office to talk seriously about making something happen.&lt;/p&gt;

&lt;p&gt;We were lost deep within another cloud: the cloud of doubt hanging over the Oracle takeover of Sun Microsystems. With change in the air, Tom, Nick and I accepted new positions at Engine Yard, and the wheels were set in motion for JRuby support.&lt;/p&gt;

&lt;p&gt;It was a hard slog to get here. Engine Yard’s cloud was under heavy development, marketing, and rebranding, so we kept cranking out JRuby releases and helping anyone with available cycles get to know JRuby better. In early 2010, Engine Yard hired Hiro Asari, a long time JRuby contributor also interested in making a move. Hiro became the first-ever-anywhere JRuby support engineer, and we launched official commercial support for JRuby later that year.&lt;/p&gt;

&lt;p&gt;The arrival at engine yard of David Calavera, creator of the Trinidad server, finally gave us the missing piece needed for JRuby on Engine Yard Cloud. We went to alpha stage early in 2011 and to beta some months later for RailsConf.&lt;/p&gt;

&lt;p&gt;With a few production users under our belt, we decided RubyConf 2011 was the right time to go to GA (general availability). And here we are!&lt;/p&gt;

&lt;h2 id=&quot;next-steps-for-you&quot;&gt;Next Steps For You&lt;/h2&gt;

&lt;p&gt;Engine Yard wants to help you bootstrap your application, and to do so we’re continuing to offer &lt;a href=&quot;http://engineyard.com/tryjruby&quot;&gt;500 free compute hours&lt;/a&gt;. That applies to JRuby too, so there’s really no reason &lt;em&gt;not&lt;/em&gt; to give it a shot. If you’ve ever wanted to try deploying to JRuby, or if you’ve never played with Engine Yard Cloud, today is the day!&lt;/p&gt;

&lt;p&gt;All the Engine Yard JRuby team members will also be at RubyConf this week, and we’ll be holding continuous office hours wherever we stand (perhaps with some scheduled office hours too) to help you get started on Engine Yard Cloud, help you attempt a migration to JRuby, or just to hear what you want from JRuby. We’ve done all this work for you, the Rubyists and JRubyists of the world, and we want you to have the best experience possible!&lt;/p&gt;

&lt;p&gt;Finally, I’d really like everyone to send a big “Thank You” to &lt;a href=&quot;http://twitter.com/engineyard&quot;&gt;@engineyard&lt;/a&gt; on Twitter. Without their support these past couple years, JRuby would not have made so much progress. Without a commercial support offering, several large JRuby users might never have used Ruby at all. And now, with official cloud support, deploying JRuby is a fire-and-forget proposition. Engine Yard helped us bring JRuby to maturity, and the Ruby world is a better place as a result.&lt;/p&gt;

&lt;p&gt;Thank you all, friends, for your support these many years. I hope to hear from each and every one of you, and you can rest assured more great things are coming from JRuby and Engine Yard.&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>HELP WANTED JavaOne Script Bowl Demos</title>
      <link href="http://blog.jruby.org/2011/09/help-wanted-javaOne-scriptbowl"/>
      <updated>2011-09-22T00:00:00-04:00</updated>
      <id>http://blog.jruby.org/2011/09/help-wanted:-javaOne-scriptbowl</id>
      <author>
        <name>Thomas E. Enebo</name>
        <email>tom.enebo@gmail.com</email>
      </author>
      <content type="html">&lt;p&gt;JavaOne Script Bowl (&lt;a href=&quot;https://oracleus.wingateweb.com/scheduler/eventcatalog/eventCatalogJavaOne.do&quot;&gt;Weds. Oct. 5, 8:30am&lt;/a&gt;) is an annual event at &lt;a href=&quot;http://www.oracle.com/javaone/index.html&quot;&gt;JavaOne&lt;/a&gt; where various languages which run on the JVM get to showcase the best they have to offer in two short ~5 minute segments: technology and community.  Ruby (via JRuby) has been involved in this event for the four years it has existed.  This year we are facing off against Clojure, Scala, and Groovy.  We are trying to prepare for this event and we need your help!&lt;/p&gt;

&lt;p&gt;The main goal of this event is for Java language programmers to get a good taste of what the alternative JVM languages have to offer.  By the end of the script bowl, the typical attendee has hopefully been infected with the desire to look into one or more new languages.  Our goal is to entice the attendee to fall in love with Ruby.&lt;/p&gt;

&lt;p&gt;For the technology segment we plan on showing several things which make Ruby shine in comparison to other JVM languages (Java included).   We plan on showing the simplicity of Sinatra; The brevity and power of Rake along with JRuby’s Java Ant integration;  The future of Jenkins via Ruby plugins;  Also perhaps a display of our ability to install any Maven artifact as it it were a Ruby gem.  We are still open to any other cool technology demos, so if you can cook up a cool demo then let us know.&lt;/p&gt;

&lt;p&gt;For the community segment we are looking for examples/demos which underscore why the Ruby community is worth taking notice of.  Rails is the 500 pound gorilla in the room, but technologies like Sass underscore how much innovation is happening in the Ruby community.  This segment can be done with live demos, but we are also looking for reasoned arguments of why the Ruby community is great.  A few other ideas: interesting testing technologies, zero-turnaround deploys.&lt;/p&gt;

&lt;p&gt;So how can you help?  Please send us:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A cool demo using a Ruby technology&lt;/li&gt;
  &lt;li&gt;A simple pitch (like 4-5 slides) showing an example of how the Ruby community shines&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we end up using your idea or demo, you will get a &lt;a href=&quot;http://blog.jruby.org/2011/09/jruby-tshirts/&quot;&gt;JRuby t-shirt&lt;/a&gt; as thanks for helping.  Hell, if we don’t use your idea but appreciate the effort you put into your submission, you may get a t-shirt anyways.&lt;/p&gt;

&lt;p&gt;Your submissions, whether code or a tech pitch, should be sent to &lt;strong&gt;community@jruby.org&lt;/strong&gt; as a link to a &lt;a href=&quot;http://www.github.com&quot;&gt;github.com&lt;/a&gt; repository with a description of what you are sending us (also put it in the README in the repo).  Any pitches or demos will probably only be shown for 1 minute or less during script bowl so take this into consideration when making your submissions.  Oh….one more small detail: deadline for accepting submissions is Sept 30!  So get cracking and help us make this the most memorable Script Bowl yet.&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>New JRuby T-Shirts</title>
      <link href="http://blog.jruby.org/2011/09/jruby-tshirts"/>
      <updated>2011-09-14T00:00:00-04:00</updated>
      <id>http://blog.jruby.org/2011/09/jruby-tshirts</id>
      <author>
        <name>Shane Becker</name>
        <email>veganstraightedge@gmail.com</email>
      </author>
      <content type="html">&lt;h1 id=&quot;i-heart-jruby-shirt&quot;&gt;I Heart JRuby shirt&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://flickr.com/veganstraightedge/6142405678&quot; title=&quot;I &amp;lt;3 JRuby shirt, on Flickr&quot;&gt;&lt;img src=&quot;http://farm7.static.flickr.com/6195/6142405678_d2c5ba602e_z.jpg&quot; alt=&quot;I &amp;lt;3 JRuby shirt&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you totally love JRuby? Of course you do. Want a t-shirt to show the world just how much you love JRuby? Of course you do. Here’s how you can get one.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Write up an amazing blog post about JRuby – your experience with it, something great you’ve learned about it (and yourself), clever solutions to tricky problems, etc&lt;/li&gt;
  &lt;li&gt;Present about JRuby at a local meetup – try to video record it and post it online&lt;/li&gt;
  &lt;li&gt;Give a talk about JRuby at a conference&lt;/li&gt;
  &lt;li&gt;Convince the company that you work for to start using JRuby in its stack&lt;/li&gt;
  &lt;li&gt;Get part of your work time budget to &lt;a href=&quot;https://github.com/jruby/jruby&quot;&gt;contribute to JRuby&lt;/a&gt; and/or &lt;a href=&quot;http://twitter.com/nicksieger/status/111172038349164545&quot;&gt;JRuby related projects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do one of those things and you’ll earn yourself one of these super comfy t-shirts to wear proudly.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Stay tuned for how to request your shirt&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;a-jruby-production-shirt&quot;&gt;A JRuby Production shirt&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://flickr.com/veganstraightedge/6141860917&quot; title=&quot;A JRuby Production shirt, on Flickr&quot;&gt;&lt;img src=&quot;http://farm7.static.flickr.com/6167/6141860917_e74a6f891c_z.jpg&quot; alt=&quot;A JRuby Production shirt&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Are you using JRuby in production? Are you willing to talk about it publicly? Will you let us interview you and/or your team to do a post about your experience? If so, we’ve got special t-shirts for you. Get in touch and tell us what you’re up to with JRuby and who we should talk to about it.&lt;/p&gt;

&lt;p&gt;Email: &lt;a href=&quot;mailto:community@jruby.org&quot;&gt;community@jruby.org&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Shirts modeled by my friends Kristen and Alex at &lt;a href=&quot;http://farmhouse.la&quot; title=&quot;The Farmhouse&quot;&gt;The Farmhouse&lt;/a&gt; in Hollywood, California&lt;/em&gt;&lt;/p&gt;

</content>
    </entry>
  
    <entry>
      <title>activerecord-jdbc-adapter 1.2.0 Released!</title>
      <link href="http://blog.jruby.org/2011/09/ar-jdbc-1-2-0-released"/>
      <updated>2011-09-13T00:00:00-04:00</updated>
      <id>http://blog.jruby.org/2011/09/ar-jdbc-1-2-0-released</id>
      <author>
        <name>Nick Sieger</name>
        <email>nicksieger@gmail.com</email>
      </author>
      <content type="html">&lt;p&gt;With the advent of our new &lt;a href=&quot;http://blog.jruby.org&quot;&gt;jruby.org blog&lt;/a&gt;
comes a new software release. Our JDBC-based adapter for ActiveRecord
is now compatible with the &lt;a href=&quot;http://weblog.rubyonrails.org/2011/8/31/rails-3-1-0-has-been-released&quot;&gt;Rails 3.1 release&lt;/a&gt;. AR-JDBC is
also tested to be compatible with 2.3.x and 3.0.x.&lt;/p&gt;

&lt;p&gt;Install it as usual with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install activerecord-jdbc-adapter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A new and notable feature of Rails 3.1 is that support for AR-JDBC is
built-in. So when you generate a new Rails application with JRuby,
your Gemfile will be set up automatically for use with JRuby and
AR-JDBC. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails new&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rails new photoblog -d mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;creates the following section of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'activerecord-jdbcmysql-adapter'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So, no more &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-m http://jruby.org&lt;/code&gt;, no more &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails generate jdbc&lt;/code&gt;,
nothing. JRuby on Rails works out of the box.&lt;/p&gt;

&lt;p&gt;I also want to take a moment to welcome &lt;a href=&quot;https://github.com/ajuckel&quot;&gt;Anthony Juckel&lt;/a&gt;,
&lt;a href=&quot;https://github.com/arunagw&quot;&gt;Arun Agrawal&lt;/a&gt;, &lt;a href=&quot;https://github.com/guilleiguaran&quot;&gt;Guillermo Iguaran&lt;/a&gt;, &lt;a href=&quot;https://github.com/hexgnu&quot;&gt;Matt
Kirk&lt;/a&gt;, &lt;a href=&quot;https://github.com/lukefx&quot;&gt;Luca Simone&lt;/a&gt;, and &lt;a href=&quot;https://github.com/samuelkadolph&quot;&gt;Samuel
Kadolph&lt;/a&gt; for stepping up to the plate to help maintain
AR-JDBC going forward. Thanks everyone!&lt;/p&gt;

</content>
    </entry>
  
    <entry>
      <title>A Start</title>
      <link href="http://blog.jruby.org/2011/09/start"/>
      <updated>2011-09-09T00:00:00-04:00</updated>
      <id>http://blog.jruby.org/2011/09/start</id>
      <author>
        <name>Shane Becker</name>
        <email>veganstraightedge@gmail.com</email>
      </author>
      <content type="html">&lt;h1 id=&quot;ready-set-go&quot;&gt;Ready, Set… Go!&lt;/h1&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;For some time now, there’s been a &lt;a href=&quot;http://jruby.org/atom.xml&quot; title=&quot;JRuby.org News&quot;&gt;unified feed of mostly release notes&lt;/a&gt;. But never really a unified place for non-release notes information about JRuby. There was the [Engine Yard blog](http://www.engineyard.com/blog/?s=jruby “Jruby&lt;/td&gt;
      &lt;td&gt;Engine Yard Ruby on Rails Blog”), &lt;a href=&quot;http://blog.headius.com/&quot; title=&quot;Headius&quot;&gt;Charles Nutter’s blog&lt;/a&gt;, &lt;a href=&quot;http://blog.nicksieger.com&quot; title=&quot;Nick Sieger&quot;&gt;Nick Sieger’s blog&lt;/a&gt;, &lt;a href=&quot;http://blog.enebo.com&quot; title=&quot;Tom's Ruminations&quot;&gt;Tom Enebo’s blog&lt;/a&gt; and &lt;a href=&quot;http://www.google.com/search?q=jruby&quot; title=&quot;jruby - Google Search&quot;&gt;various other sources&lt;/a&gt;. (The release notes feed will continue to exist. No need to change your feed readers.)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Today we change that. You now are looking at the new home for news, information and all of the things JRuby related that aren’t release notes.&lt;/p&gt;

&lt;p&gt;Tell your friends and stay tuned for more.&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>JRuby.org Launched!</title>
      <link href="http://blog.jruby.org/2009/06/jruby-dot-org-launched"/>
      <updated>2009-06-13T00:00:00-04:00</updated>
      <id>http://blog.jruby.org/2009/06/jruby-dot-org-launched</id>
      <author>
        <name>JRuby Team</name>
        <email>community@jruby.org</email>
      </author>
      <content type="html">&lt;p&gt;Of course we launched the new JRuby.org yesterday. There’s still some content to be refined/revised and plenty of styling to clean up, but it’s a vast improvement over our previous non-existent web presence. We’re thrilled with the design of the site and keen to add more useful content over the next couple weeks.&lt;/p&gt;

&lt;p&gt;And for anyone interested, contact &lt;a href=&quot;mailto:marknutter@gmail.com&quot;&gt;marknutter@gmail.com&lt;/a&gt; if you want to get a similarly smoov design for a site of your own.&lt;/p&gt;

&lt;p&gt;Check it: &lt;a href=&quot;http://www.jruby.org&quot; title=&quot;Home &amp;mdash; JRuby.org&quot;&gt;http://www.jruby.org&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  

</feed>
